openapi: 3.0.0
servers:
    # Added by API Auto Mocking Plugin
    - description: SwaggerHub API Auto Mocking
      url: https://virtserver.swaggerhub.com/OBDASystems/dashboards/1.0.0
    - url: http://localhost:8989/mws/rest/mwsx
info:
  version: "1.0.0"
  title: Monolith dashboards
  description: The API for managing the monolith dashboards
paths: 
  /owlOntology/{ontologyName}/dashboards:
    get:
      tags:
      - Dashboards
      summary: Get the available dashboards
      operationId: getDashboards
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Dashboard'
    post:
      tags: 
      - Dashboards
      summary: Add a new dashboard
      operationId: postDashboards
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Dashboard'
  /owlOntology/{ontologyName}/dashboard/{dashboardId}:
    put:
      tags:
      - Dashboards
      summary: Modify the dashboard identified by `dashboardId`
      operationId: putDashboard
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: true
        schema:
          type: string
      - name: dashboardId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
    delete:
      tags:
      - Dashboards
      summary: Delete the dashboard identified by `dashboardId`
      operationId: deleteDashboard
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: true
        schema:
          type: string
      - name: dashboardId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
components:
  schemas:
    Dashboard:
      properties:
        title:
          type: string
        id:
          type: string
        description:
          type: string
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/DashboardTab'
    DashboardTab:
      properties:
        title: 
          type: string
        cards:
          type: array
          items:
            $ref: '#/components/schemas/DashboardCard'
        compactType:
          type: string
          enum:
            - none
            - horizontal
            - vertical
      
    DashboardCard:
      properties:
        id: 
          type: integer
        title:
          type: string
        x:
          type: integer
        y:
          type: integer
        height:
          type: integer
        width:
          type: integer
        backgroundColor: 
          type: string
        description:
          type: string
        settings:
          oneOf: 
            - $ref: '#/components/schemas/DashboardCardSettingsQuery'
            - $ref: '#/components/schemas/DashboardCardSettingsMarkdown'
            - $ref: '#/components/schemas/DashboardCardSettingsOntology'
    DashboardCardSettingsQuery:
      properties:
        queryCatalogType:
          type: string
          enum:
            - sparql
            - sparqling
        queryID:
          type: string
        sparqlCode:
          type: string
        endpoint:
          type: string
        autorun: 
          type: boolean
        refreshRate:
          description: '0 means no refresh'
          type: integer
        parameterSetting:
          type: object
          additionalProperties:
            type: string
        chartConfiguration:
          type: string
          description: Already modelled in com.mwsx.model.ChartConfiguration
    DashboardCardSettingsMarkdown:
      properties:
        markdown: 
          type: string
    DashboardCardSettingsOntology:
      properties:
        renderer:
          type: string
        diagram:
          type: string
          enum:
            - graphol
            - er
            - floaty
        centeredNodeId:
          type: string
        zoom:
          type: number
