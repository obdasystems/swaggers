openapi: 3.0.0
info:
  description: >-
    This is the API for Mastro an Ontology-based Data Management System. You can
    create modify ontologies, map them to a datasource and query the ontology
    directlty with user friendly tools as the Query Builder and the Virtual
    Knowledge Graph.
  version: 1.0.0
  title: Mastro API model
  contact:
    email: info@obdasystems.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{protocol}://{tenant}{port}/mws/rest/mwsx'
    variables:
      protocol:
        default: https
      tenant:
        default: localhost
      port:
        default: ':8989'
tags:
  - name: authentication_Login
    x-displayName: Login
  - name: authentication_Logout
    x-displayName: Logout
  - name: ontologies_Persistence
    x-displayName: Persistence
  - name: ontologies_Logical
    x-displayName: Logical
  - name: ontologies_Reasoning
    x-displayName: Reasoning
  - name: ontologies_Upload
    x-displayName: Upload
  - name: ontologies_Metadata
    x-displayName: Metadata
  - name: ontologies_Visualize
    x-displayName: Visualize
  - name: ontologies_Difference
    x-displayName: Difference
  - name: ontologies_Publication
    x-displayName: Publication
  - name: ontologies_FileSystem
    x-displayName: FileSystem
  - name: mappings_Persistence
    x-displayName: Persistence
  - name: mappings_Analysis
    x-displayName: Analysis
  - name: mappings_Test
    x-displayName: Test
  - name: mappings_Info
    x-displayName: Info
  - name: mappings_Template
    x-displayName: Template
  - name: mappings_Assertion
    x-displayName: Assertion
  - name: mappings_SQLView
    x-displayName: SQLView
  - name: mappings_IntensionalAnnotation
    x-displayName: IntensionalAnnotation
  - name: mappings_Dependencies
    x-displayName: Dependencies
  - name: mappings_Parameters
    x-displayName: Parameters
  - name: mappings_Database
    x-displayName: Database
  - name: mappings_other
    x-displayName: other
  - name: mappings_DataLineage
    x-displayName: DataLineage
  - name: datasources_Persistence
    x-displayName: Persistence
  - name: datasources_Metadata
    x-displayName: Metadata
  - name: datasources_Drivers
    x-displayName: Drivers
  - name: datasources_Test
    x-displayName: Test
  - name: endpoints_Persistence
    x-displayName: Persistence
  - name: endpoints_Referring
    x-displayName: Referring
  - name: endpoints_Info
    x-displayName: Info
  - name: endpoints_Status
    x-displayName: Status
  - name: endpoints_Empties
    x-displayName: Empties
  - name: endpoints_Highlights
    x-displayName: Highlights
  - name: endpoints_QueryCount
    x-displayName: QueryCount
  - name: endpoints_Query
    x-displayName: Query
  - name: endpoints_ExportedQuery
    x-displayName: ExportedQuery
  - name: endpoints_ConstructQuery
    x-displayName: ConstructQuery
  - name: endpoints_VKG
    x-displayName: VKG
  - name: endpoints_CountEntityInstances
    x-displayName: CountEntityInstances
  - name: endpoints_InstanceChecking
    x-displayName: InstanceChecking
  - name: endpoints_MinMaxDataProperties
    x-displayName: MinMaxDataProperties
  - name: endpoints_MappingAnalysis
    x-displayName: MappingAnalysis
  - name: query-catalog_Persistence
    x-displayName: Persistence
  - name: query-catalog_Utils
    x-displayName: Utils
  - name: query-catalog_Publication
    x-displayName: Publication
  - name: sparqling_OntologyGraph
    description: >-
      Depending on the selected node and the clicked node the ontology graph
      will change the highlightments. These results will be used essentially by
      GRAPHOLscape.
    x-displayName: OntologyGraph
  - name: sparqling_QueryGraphBGP
    description: >-
      Depending on the selected node and the clicked node the server will
      compute the query graph which will be rendered by Sparqling front end.
      These result will be used to render the query graph and the query head and
      the SPARQL code. These operations will modify only the basic graph
      pattern.
    x-displayName: QueryGraphBGP
  - name: sparqling_QueryGraphHead
    description: These operations will modify the query graph head.
    x-displayName: QueryGraphHead
  - name: sparqling_QueryGraphFilter
    description: These operations will modify the query graph filter part.
    x-displayName: QueryGraphFilter
  - name: sparqling_QueryGraphOptional
    description: These operations will modify the query graph optional part.
    x-displayName: QueryGraphOptional
  - name: sparqling_QueryGraphExtra
    description: These are extra operations for the query graph.
    x-displayName: QueryGraphExtra
  - name: sparqling_VisualizeSPARQL
    description: >-
      These operations will translate a SPARQL query in a query graph to be
      visualized and modified in Sparqling
    x-displayName: VisualizeSPARQL
  - name: sparqling_Highlights
    x-displayName: Highlights
  - name: sparqling_Construct
    x-displayName: Construct
  - name: sparqling_Visualize
    x-displayName: Visualize
  - name: triplify_Execution
    x-displayName: Execution
  - name: triplify_Threads
    x-displayName: Threads
  - name: triplify_Start
    x-displayName: Start
  - name: virtual-entities_Persistence
    x-displayName: Persistence
  - name: vkg_Persistence
    x-displayName: Persistence
  - name: vkg_NodeRendering
    x-displayName: NodeRendering
  - name: knowledge-graphs_Persistence
    x-displayName: Persistence
  - name: knowledge-graphs_General
    x-displayName: General
  - name: knowledge-graphs_FileSystem
    x-displayName: FileSystem
  - name: knowledge-graphs_Status
    x-displayName: Status
  - name: knowledge-graphs_Classes
    x-displayName: Classes
  - name: knowledge-graphs_Instances
    x-displayName: Instances
  - name: knowledge-graphs_Union
    x-displayName: Union
  - name: knowledge-graphs_Query
    x-displayName: Query
  - name: knowledge-graphs_Upload
    x-displayName: Upload
  - name: knowledge-graphs_CSV
    x-displayName: CSV
  - name: ontology-designer_Persistence
    x-displayName: Persistence
  - name: ontology-catalog_Persistence
    x-displayName: Persistence
  - name: ontology-catalog_Query
    x-displayName: Query
  - name: authorization-view-profiles_Logical
    x-displayName: Logical
  - name: authorization-view-profiles_Persistence
    x-displayName: Persistence
  - name: dashboards_Persistence
    x-displayName: Persistence
  - name: data-quality_Constraints
    x-displayName: Constraints
  - name: data-quality_CheckSet
    x-displayName: CheckSet
  - name: data-quality_SHACL
    x-displayName: SHACL
  - name: misc_Logger
    x-displayName: Logger
  - name: misc_Versions
    x-displayName: Versions
  - name: misc_Resources
    x-displayName: Resources
  - name: misc_Mastro
    x-displayName: Mastro
  - name: misc_LastLoaded
    x-displayName: LastLoaded
  - name: misc_GlobalAnnotation
    x-displayName: GlobalAnnotation
  - name: misc_Server
    x-displayName: Server
  - name: misc_Geocoding
    x-displayName: Geocoding
  - name: misc_Statics
    x-displayName: Statics
  - name: misc_System
    x-displayName: System
  - name: misc_QueryTags
    x-displayName: QueryTags
  - name: misc_Statistics
    x-displayName: Statistics
  - name: task-scheduler_State
    x-displayName: State
  - name: task-scheduler_Actions
    x-displayName: Actions
  - name: task-scheduler_Persistence
    x-displayName: Persistence
  - name: task-scheduler_Execution
    x-displayName: Execution
  - name: users-roles_User
    x-displayName: User
  - name: users-roles_Roles
    x-displayName: Roles
  - name: users-roles_MonolithRole
    x-displayName: MonolithRole
paths:
  /login:
    get:
      summary: >-
        REST call for basic authentication, returns the session ID as a response
        header
      tags:
        - authentication_Login
      operationId: get__login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unhauthorized
      security:
        - basicAuth: []
  /logout:
    get:
      tags:
        - authentication_Logout
      summary: >-
        REST call for basic authentication, returns the session ID as a response
        header
      operationId: get__logout
      responses:
        '200':
          description: OK
        '401':
          description: Unhauthorized
      security:
        - basicAuth: []
  /logout/{username}:
    put:
      summary: >-
        Closes the MWS session opened by the user 'username' - returns 0 if the
        closing operation succeed
      tags:
        - authentication_Logout
      operationId: put__logout_by_username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - basicAuth: []
  /owlOntology:
    get:
      tags:
        - ontologies_Persistence
      summary: Returns all the available ontologies
      operationId: get__owlOntology
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ontology'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - ontologies_Persistence
      summary: Creates a new ontology
      operationId: post__owlOntology_name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ontology'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontology'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontologies_Persistence
      summary: Deletes all the ontologies stored in the repository
      operationId: delete__all_owlOntologies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontology'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}:
    get:
      tags:
        - ontologies_Persistence
      summary: Returns the ontology named <code>name</code>
      operationId: get__owlOntology_name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontology'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - ontologies_Persistence
      summary: >-
        Adds a new version to the ontology <code>name</code>.<br/> The 'syntax'
        parameter assumes one of the following values: <br/>'MANCHESTER_SYNTAX',
        'FUNCTIONAL_SYNTAX'
      operationId: post__owlOntology_name_version
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: syntax
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontologies_Persistence
      summary: 'Deletes the ontology named <code>name</code>.<br/> '
      operationId: delete__owlOntology
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version:
    get:
      tags:
        - ontologies_Persistence
      summary: >-
        Returns the file containing the definition of the ontology
        <code>name</code>, with version 'version'. <br/>The format parameter
        assumes one of the following values: 'graphol', 'fss', 'xml', 'turtle'
      operationId: get__owlOntology_name_version
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
        - name: approximated
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontologies_Persistence
      summary: 'Deletes version ''version'' of the ontology named <code>name</code>.<br/> '
      operationId: delete__owlOntology_name_version
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ignoredImports:
    get:
      tags:
        - ontologies_Logical
      summary: Returns the list of ignored ontology import IRIs
      operationId: get__owlOntology_name_version_ignoredImports
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/closed:
    get:
      tags:
        - ontologies_Reasoning
      summary: >-
        Returns the file containing the definition of the closed ontology
        <code>name</code>, with version 'version'. <br/>The format parameter
        assumes one of the following values: 'graphol', 'fss', 'xml', 'turtle'
      operationId: get__owlOntology_name_version_closed
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontologies_Reasoning
      summary: >-
        Deletes the closed ontology <code>name</code>, with version 'version'.
        <br/>
      operationId: delete__owlOntology_name_version_closed
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - ontologies_Reasoning
      summary: >-
        Starts the thread for the computation of the deductive closure of
        ontology <code>name</code>, with version 'version'.Returns the ID of the
        thread
      operationId: post__owlOntology_name_version_closed
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
        - name: computeEmpties
          in: query
          required: true
          schema:
            type: string
        - name: computeGeneralConceptInclusions
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/closed/{threadId}/status:
    get:
      tags:
        - ontologies_Reasoning
      summary: >-
        Returns the status of the deductive closure thread identified by
        'threadId'
      operationId: get__owlOntology_name_version_closed_threadId_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MwsxOntologyVersionCloserStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/closedComputed:
    get:
      tags:
        - ontologies_Reasoning
      summary: >-
        Returns 0 if the closed ontology <code>name</code>, with version
        'version', has been computed, 1 otherwise.
      operationId: get__owlOntology_name_version_closed_computed
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/closingReport:
    get:
      tags:
        - ontologies_Reasoning
      summary: >-
        Returns the file containing the definition of the closed ontology
        <code>name</code>, with version 'version'. <br/>The format parameter
        assumes one of the following values: 'graphol', 'fss', 'xml', 'turtle'
      operationId: get__owlOntology_name_version_closingReport
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXOWLGraphDeductiveClosureReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/closingReportComputed:
    get:
      tags:
        - ontologies_Reasoning
      summary: >-
        Returns the file containing the definition of the closed ontology
        <code>name</code>, with version 'version'. <br/>The format parameter
        assumes one of the following values: 'graphol', 'fss', 'xml', 'turtle'
      operationId: get__owlOntology_name_version_closingReportComputed
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/hierarchy/owl:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        Returns the file containing the definition of the ontology
        <code>name</code>, with version 'version' used to render the hierarchy
        class and property trees
      operationId: get__owlOntology_name_version_hierarchy_owl
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/loaderThreads:
    post:
      tags:
        - ontologies_Upload
      summary: >-
        Adds a new version to the ontology <code>name</code>.<br/> The 'syntax'
        parameter assumes one of the following values: <br/>'MANCHESTER_SYNTAX',
        'FUNCTIONAL_SYNTAX'
      operationId: post__owlOntology_name_version_async
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: syntax
          in: query
          required: true
          schema:
            type: string
        - name: params
          in: query
          required: true
          schema:
            type: string
        - name: computeEmpties
          in: query
          required: true
          schema:
            type: string
        - name: computeGeneralConceptInclusions
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/loaderThreads/metadata:
    post:
      tags:
        - ontologies_Metadata
      summary: >-
        Adds a new version to the ontology <code>name</code>.<br/> The 'syntax'
        parameter assumes one of the following values: <br/>'MANCHESTER_SYNTAX',
        'FUNCTIONAL_SYNTAX'
      operationId: post__owlOntology_name_version_metadata_async
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: newVersion
          in: query
          required: true
          schema:
            type: string
        - name: action
          in: query
          required: true
          schema:
            type: string
        - name: params
          in: query
          required: true
          schema:
            type: string
        - name: computeEmpties
          in: query
          required: true
          schema:
            type: string
        - name: computeGeneralConceptInclusions
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXOntologyCatalogOntologyMetadataSet'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/loaderThread/{threadId}/status:
    get:
      tags:
        - ontologies_Upload
      summary: Returns the status of an ontology version loader thread
      operationId: get__owlOntology_name_version_loader_thread_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MwsxOntologyVersionLoaderStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/loaderThread/{threadId}/report:
    get:
      tags:
        - ontologies_Upload
      summary: Return the report for completed ontology version loader threads
      operationId: get__owlOntology_name_version_loader_thread_report
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MwsxOntologyVersionLoaderReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/importFromIRI:
    get:
      tags:
        - ontologies_Upload
      summary: GET mwsx/owlOntology/{name}/importFromIRI
      operationId: get__owlOntology_name_version_import_from_iri
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyVersion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/hierarchy:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/hierarchy
      operationId: get__owlOntology_name_version_hierarchy
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyHierarchy'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/catalog:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/catalog
      operationId: get__owlOntology_name_version_catalog
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/info:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        Gets the info of the version 'version' of the ontology named
        <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_info
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/entities/classes:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        Gets the set of class entities of version 'version' of the ontology
        named <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_entities_classes
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/entities/objectProperties:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        Gets the set of entities of object property version 'version' of the
        ontology named <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_entities_objectProperties
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/entities/dataProperties:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        Gets the set of data property entities of version 'version' of the
        ontology named <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_entities_dataProperties
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/entities/annotationProperties:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        Gets the set of annotation property entities of version 'version' of the
        ontology named <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_entities_annotationProperties
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/entities:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        Gets the set of entities of version 'version' of the ontology named
        <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_entities
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/entity/{id}:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/entity/{id}
      operationId: get__owlOntology_name_version_entity
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/alphabet/class/{ID}/logical:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/alphabet/class/{ID}/logical
      operationId: get__owlOntology_name_version_alphabet_class_ID_logical
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/annotations:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/annotations
      operationId: get__owlOntology_name_version_alphabet_class_ID_annotations
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: entityIRI
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/alphabet/objectProperty/{ID}/logical:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/alphabet/objectProperty/{ID}/logical
      operationId: get__owlOntology_name_version_alphabet_objectProperty_ID_logical
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPropertyInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/alphabet/dataProperty/{ID}/logical:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/alphabet/dataProperty/{ID}/logical
      operationId: get__owlOntology_name_version_alphabet_dataProperty_ID_logical
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataPropertyInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/alphabet/dataProperties/domainAndRange:
    get:
      tags:
        - ontologies_Logical
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/alphabet/dataProperties/domainAndRange
      operationId: get__owlOntology_name_version_alphabet_dataProperties_domainAndRange
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataPropertyInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/graphol:
    get:
      tags:
        - ontologies_Visualize
      summary: >-
        Returns the Graphol file of the version 'version' of the ontology named
        <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_graphol
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontologies_Visualize
      summary: >-
        Deletes the Graphol file of the version 'version' of the ontology named
        <code>name</code>.<br/> 
      operationId: delete__owlOntology_name_version_graphol
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/gscape:
    get:
      tags:
        - ontologies_Visualize
      summary: >-
        Returns the RDFGraph file of the version 'version' of the ontology named
        <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_gscape
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontologies_Visualize
      summary: >-
        Deletes the RDFGraph file of the version 'version' of the ontology named
        <code>name</code>.<br/> 
      operationId: delete__owlOntology_name_version_gscape
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/graphol/check:
    get:
      tags:
        - ontologies_Visualize
      summary: GET mwsx/owlOntology/{name}/version/graphol/check
      operationId: get__owlOntology_name_version_graphol_check
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/gscape/check:
    get:
      tags:
        - ontologies_Visualize
      summary: GET mwsx/owlOntology/{name}/version/gscape/check
      operationId: get__owlOntology_name_version_gscape_check
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/owl:
    get:
      tags:
        - ontologies_Persistence
      summary: >-
        Returns the OWL file of the version 'version' of the ontology named
        <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_owl
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/alphabet/individual/{ID}/logical:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/alphabet/individual/{ID}/logical
      operationId: get_individual_info
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/alphabet/search/individual:
    get:
      tags:
        - ontologies_Logical
      summary: GET mwsx/owlOntology/{name}/version/alphabet/search/individual
      operationId: get_search_individual_info
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: search
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyDifference/{name}/vs/{otherName}:
    get:
      tags:
        - ontologies_Difference
      summary: GET mwsx/ontologyDifference/{name}/vs/{otherName}
      operationId: get_ontology_difference
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: otherName
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: otherversion
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXOntologyDifference'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/metadata:
    get:
      tags:
        - ontologies_Metadata
      summary: GET mwsx/owlOntology/{name}/version/metadata
      operationId: get_ontology_metadata_snapshot
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXOntologyCatalogOntologyMetadataSet'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/metadata/missing:
    get:
      tags:
        - ontologies_Metadata
      summary: GET mwsx/owlOntology/{name}/version/metadata/missing
      operationId: get_ontology_missing_metadata_snapshot
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXOntologyCatalogOntologyMetadataSet'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/queries/publicationRequests:
    get:
      tags:
        - ontologies_Publication
      summary: >-
        Removes a specific query from the catalog available for this version of
        the ontology
      operationId: get_query_publication_requests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationRequests'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/folder:
    get:
      tags:
        - ontologies_FileSystem
      summary: Returns the folder where ontology named <code>name</code> is stored in
      operationId: get__owlOntology_folder_name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/folder:
    get:
      tags:
        - ontologies_FileSystem
      summary: Returns the folder where ontology named <code>name</code> is stored in
      operationId: get__owlOntology_version_folder_name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping:
    get:
      tags:
        - mappings_Persistence
      summary: Returns the list of mappings available for a given ontology version
      operationId: get__owlOntology_name_version_mapping
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mappings'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_Persistence
      summary: Creates a new set of mappings
      operationId: post__owlOntology_name_version_mapping_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: create
          in: query
          required: true
          schema:
            type: string
        - name: check
          in: query
          required: true
          schema:
            type: string
        - name: checkDeprecation
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MappingInfo'
                  - $ref: '#/components/schemas/MappingsCheckResult'
                  - $ref: '#/components/schemas/Mapping'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}:
    get:
      tags:
        - mappings_Persistence
      summary: 'Returns the set of mappings identified ID for a given ontology version  '
      operationId: get__owlOntology_name_version_mapping_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_Persistence
      summary: >-
        Updates mapping infos (passed as a Base64 encoded object
        NewMappingFileInfo in the query string) 
      operationId: put__owlOntology_name_version_mapping_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: create
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_Persistence
      summary: Deletes a set of mappings
      operationId: delete__owlOntology_name_version_mapping_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/checkDeprecation:
    get:
      tags:
        - mappings_Analysis
      summary: Performs mapping analysis returning a list of deprecation messages
      operationId: get__owlOntology_name_version_mapping_ID_checkDeprecation
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/count:
    get:
      tags:
        - mappings_Analysis
      summary: Returns mapping statistics by ontology entity
      operationId: get__owlOntology_name_version_mapping_ID_count
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingEntityCount'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/duplicate:
    post:
      tags:
        - mappings_Persistence
      summary: Duplicates a given set of mappings
      operationId: post__owlOntology_name_version_mapping_ID_duplicate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: check
          in: query
          required: true
          schema:
            type: string
        - name: create
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/backup:
    get:
      tags:
        - mappings_Persistence
      summary: Verifies whether a backup copy of a given mapping file exists
      operationId: get__owlOntology_name_version_mapping_ID_backup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_Persistence
      summary: Creates a backup copy of a given mapping file
      operationId: post__owlOntology_name_version_mapping_ID_backup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_Persistence
      summary: Restore a backup copy of a given mapping file
      operationId: post__owlOntology_name_version_mapping_ID_restore
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_Persistence
      summary: Deletes the backup copy of a given mapping file
      operationId: post__owlOntology_name_version_mapping_ID_delete
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/migrate:
    post:
      tags:
        - mappings_Persistence
      summary: >-
        Copy a given set of mappins from a source ontology version to a target
        ontology version (works under the same ontology name)
      operationId: post__owlOntology_name_version_mapping_ID_migrate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: targetVersion
          in: query
          required: true
          schema:
            type: string
        - name: check
          in: query
          required: true
          schema:
            type: string
        - name: create
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapping'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/fixDeprecated:
    post:
      tags:
        - mappings_Persistence
      summary: Tentatively fixes mapping deprecations
      operationId: post__owlOntology_name_version_mapping_ID_fix_deprecated
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/check:
    post:
      tags:
        - mappings_Test
      summary: Perform checks on a given mapping file
      operationId: post__owlOntology_name_version_mapping_ID_check
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: check
          in: query
          required: true
          schema:
            type: string
        - name: checkDeprecation
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsCheckResult'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/info:
    get:
      tags:
        - mappings_Info
      summary: Returns info of a set of mappings
      operationId: get__owlOntology_name_version_mapping_ID_info
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/templates:
    get:
      tags:
        - mappings_Template
      summary: Returns the list of templates defined in a mapping file
      operationId: get__owlOntology_name_version_mapping_ID_templates
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/templates/refactoring:
    put:
      tags:
        - mappings_Template
      summary: >-
        Applies templates refactoring to mapping specification and returns a
        list of affected mappings ids
      operationId: get__owlOntology_name_version_mapping_ID_templates_refactoring
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXTemplateRefactoring'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/template:
    post:
      tags:
        - mappings_Template
      summary: Adds a new template to a mappng file
      operationId: post__owlOntology_name_version_mapping_ID_template
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_Template
      summary: Deletes a template from a mapping file
      operationId: delete__owlOntology_name_version_mapping_ID_template
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: template
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertions/{entityID}:
    get:
      tags:
        - mappings_Assertion
      summary: Returns the list of maping assertion involving the passed entity
      operationId: get__owlOntology_name_version_mapping_ID_assertions_entityID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: entityID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertions:
    get:
      tags:
        - mappings_Assertion
      summary: Returns the list of all mapping assertions identified by ID
      operationId: get__owlOntology_name_version_mapping_ID_assertions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_Assertion
      summary: Adds a new mapping assertion to a set of mappings
      operationId: post__owlOntology_name_version_mapping_ID_assertions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingAssertion'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}:
    delete:
      tags:
        - mappings_Assertion
      summary: Remove the mapping assertion mapID from a given set of mappings
      operationId: delete__owlOntology_name_version_mapping_ID_assertions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_Assertion
      summary: Updates the mapping assertion mapID within a given set of mappings
      operationId: put__owlOntology_name_version_mapping_ID_assertions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingAssertion'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/views:
    get:
      tags:
        - mappings_SQLView
      summary: >-
        Returns the list of view definitions declared in a  given set of
        mappings
      operationId: get__owlOntology_name_version_mapping_ID_views
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLViews'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_SQLView
      summary: Creates a new view definition in a set of mappings
      operationId: post__owlOntology_name_version_mapping_ID_views
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SQLView'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLView'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/view/{view_name}/referencedTables:
    get:
      tags:
        - mappings_SQLView
      summary: >-
        Returns the view definition identified by view_name in a given set of
        mappings
      operationId: get__owlOntology_name_version_mapping_ID_view_refTables
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: view_name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/views/referencedTables:
    get:
      tags:
        - mappings_SQLView
      summary: >-
        Returns the whole map of tables referenced by view definitions of a
        given set of mappings
      operationId: get__owlOntology_name_version_mapping_ID_views_allRefTablesMap
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/view/{view_name}:
    put:
      tags:
        - mappings_SQLView
      summary: >-
        Returns the view definition identified by view_name in a given set of
        mappings
      operationId: put__owlOntology_name_version_mapping_ID_views
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: view_name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SQLView'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLView'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_SQLView
      summary: Deletes a view definition
      operationId: delete__owlOntology_name_version_mapping_ID_views
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: view_name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLView'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/view/refactoring:
    post:
      tags:
        - mappings_SQLView
      summary: No description available
      operationId: get__owlOntology_name_version_mapping_ID_views_refactoring
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXViewRefactoring'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXViewRefactoringAnalysis'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_SQLView
      summary: No description available
      operationId: post__owlOntology_name_version_mapping_ID_views_refactoring
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXMappingViewAtomRefactoringList'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/views/{viewID}:
    get:
      tags:
        - mappings_SQLView
      summary: No description available
      operationId: get__owlOntology_name_version_mapping_ID_views_viewID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: viewID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMappings'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/annotations:
    get:
      tags:
        - mappings_IntensionalAnnotation
      summary: GET mwsx/owlOntology/{name}/version/mapping/{ID}/annotations
      operationId: get__owlOntology_name_version_intensional_annotation_mapping
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntensionalAnnotationMappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_IntensionalAnnotation
      summary: POST mwsx/owlOntology/{name}/version/mapping/{ID}/annotations
      operationId: post__owlOntology_name_version_intensional_annotation_mapping_mapId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntensionalAnnotationMappingAssertion'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntensionalAnnotationMappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/annotation/{mapID}:
    get:
      tags:
        - mappings_IntensionalAnnotation
      summary: GET mwsx/owlOntology/{name}/version/mapping/{ID}/annotation/{mapID}
      operationId: get__owlOntology_name_version_intensional_annotation_mapping_mapId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntensionalAnnotationMappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_IntensionalAnnotation
      summary: DELETE mwsx/owlOntology/{name}/version/mapping/{ID}/annotation/{mapID}
      operationId: delete__owlOntology_name_version_intensional_annotation_mapping_mapId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntensionalAnnotationMappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_IntensionalAnnotation
      summary: PUT mwsx/owlOntology/{name}/version/mapping/{ID}/annotation/{mapID}
      operationId: put__owlOntology_name_version_intensional_annotation_mapping_mapId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntensionalAnnotationMappingAssertion'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntensionalAnnotationMappingAssertion'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/generateIntensionalAnnotationsOntology:
    post:
      tags:
        - mappings_IntensionalAnnotation
      summary: >-
        POST
        mwsx/owlOntology/{name}/version/mapping/{ID}/generateIntensionalAnnotationsOntology
      operationId: >-
        post__owlOntology_name_version_mapping_ID_generateIntensionalAnnotationsOntology
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXAnnotationProcessorConfig'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/state:
    get:
      tags:
        - mappings_IntensionalAnnotation
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/state
      operationId: >-
        get__owlOntology_name_version_mapping_ID_generateIntensionalAnnotationsOntology_threadState
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/error:
    get:
      tags:
        - mappings_IntensionalAnnotation
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/error
      operationId: >-
        get__owlOntology_name_version_mapping_ID_generateIntensionalAnnotationsOntology_error
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/export:
    get:
      tags:
        - mappings_IntensionalAnnotation
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/export
      operationId: >-
        get__owlOntology_name_version_mapping_ID_generateIntensionalAnnotationsOntology_export
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/stop:
    put:
      tags:
        - mappings_IntensionalAnnotation
      summary: >-
        PUT
        mwsx/owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}/stop
      operationId: >-
        put__owlOntology_name_version_mapping_ID_generateIntensionalAnnotationsOntology_stop
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}:
    delete:
      tags:
        - mappings_IntensionalAnnotation
      summary: >-
        DELETE
        mwsx/owlOntology/{name}/version/mapping/{ID}/annotationProcessorThread/{threadId}
      operationId: >-
        delete__owlOntology_name_version_mapping_ID_generateIntensionalAnnotationsOntology
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/dependencies:
    get:
      tags:
        - mappings_Dependencies
      summary: GET mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies
      operationId: get__owlOntology_name_version_mapping_ID_dependencies
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingDependencies'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/dependencies/inclusions:
    get:
      tags:
        - mappings_Dependencies
      summary: GET mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/inclusions
      operationId: get__owlOntology_name_version_mapping_ID_dependencies_inclusions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InclusionDependency'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_Dependencies
      summary: >-
        POST
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/inclusions
      operationId: post__owlOntology_name_version_mapping_ID_dependencies_inclusions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InclusionDependency'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/dependencies/inclusion/{incID}:
    get:
      tags:
        - mappings_Dependencies
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/inclusion/{incID}
      operationId: get__owlOntology_name_version_mapping_ID_dependencies_inclusion_incID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: incID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InclusionDependency'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_Dependencies
      summary: >-
        PUT
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/inclusion/{incID}
      operationId: put__owlOntology_name_version_mapping_ID_dependencies_inclusion_incID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: incID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InclusionDependency'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_Dependencies
      summary: >-
        DELETE
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/inclusion/{incID}
      operationId: delete__owlOntology_name_version_mapping_ID_dependencies_inclusion_incID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: incID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/dependencies/keys:
    get:
      tags:
        - mappings_Dependencies
      summary: GET mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/keys
      operationId: get__owlOntology_name_version_mapping_ID_dependencies_keys
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyDependency'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_Dependencies
      summary: POST mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/keys
      operationId: post__owlOntology_name_version_mapping_ID_dependencies_keys
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyDependency'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/dependencies/key/{keyID}:
    get:
      tags:
        - mappings_Dependencies
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/key/{keyID}
      operationId: get__owlOntology_name_version_mapping_ID_dependencies_key_keyID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: keyID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyDependency'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_Dependencies
      summary: >-
        DELETE
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/key/{keyID}
      operationId: delete__owlOntology_name_version_mapping_ID_dependencies_key_keyID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: keyID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_Dependencies
      summary: >-
        PUT
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/key/{keyID}
      operationId: put__owlOntology_name_version_mapping_ID_dependencies_key_keyID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: keyID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyDependency'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/dependencies/denials:
    get:
      tags:
        - mappings_Dependencies
      summary: GET mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/denials
      operationId: get__owlOntology_name_version_mapping_ID_dependencies_denials
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DenialConstraint'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - mappings_Dependencies
      summary: POST mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/denials
      operationId: post__owlOntology_name_version_mapping_ID_dependencies_denials
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DenialConstraint'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/dependencies/denial/{denyID}:
    get:
      tags:
        - mappings_Dependencies
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/denial/{denyID}
      operationId: get__owlOntology_name_version_mapping_ID_dependencies_denial_denyID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: denyID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DenialConstraint'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_Dependencies
      summary: >-
        PUT
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/denial/{denyID}
      operationId: put__owlOntology_name_version_mapping_ID_dependencies_denial_denyID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: denyID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DenialConstraint'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - mappings_Dependencies
      summary: >-
        DELETE
        mwsx/owlOntology/{name}/version/mapping/{ID}/dependencies/denial/{denyID}
      operationId: delete__owlOntology_name_version_mapping_ID_dependencies_denial_denyID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: denyID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/parameter:
    post:
      tags:
        - mappings_Parameters
      summary: POST mwsx/owlOntology/{name}/version/mapping/{ID}/parameter
      operationId: post__owlOntology_name_version_mapping_ID_parameter
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXMappingParameter'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXMappingParameter'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - mappings_Parameters
      summary: PUT mwsx/owlOntology/{name}/version/mapping/{ID}/parameter
      operationId: put__owlOntology_name_version_mapping_ID_parameter
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXMappingParameter'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXMappingParameter'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/parameters:
    get:
      tags:
        - mappings_Parameters
      summary: GET mwsx/owlOntology/{name}/version/mapping/{ID}/parameters
      operationId: get__owlOntology_name_version_mapping_ID_parameters
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXMappingParameters'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/parameter/{paramName}:
    delete:
      tags:
        - mappings_Parameters
      summary: >-
        DELETE
        mwsx/owlOntology/{name}/version/mapping/{ID}/parameter/{paramName}
      operationId: delete__owlOntology_name_version_mapping_ID_parameter
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: paramName
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXMappingParameter'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/parameters:
    get:
      tags:
        - mappings_Parameters
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/parameters
      operationId: get__owlOntology_name_version_mapping_ID_ass_parameters
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/referencedTables:
    get:
      tags:
        - mappings_Database
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/referencedTables
      operationId: get__owlOntology_name_version_mapping_ID_ass_refTables
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/testSQLQuery:
    get:
      tags:
        - mappings_Test
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/testSQLQuery
      operationId: get__owlOntology_name_version_mapping_ID_ass_testSQLQuery
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: bufferSize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: dataSourceName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/testCustomSQLQuery:
    post:
      tags:
        - mappings_Test
      summary: >-
        POST
        mwsx/owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/testCustomSQLQuery
      operationId: post__owlOntology_name_version_mapping_ID_ass_testCustomSQLQuery
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: bufferSize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: dataSourceName
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertion/testCustomSQLQuery:
    post:
      tags:
        - mappings_Test
      summary: >-
        POST
        mwsx/owlOntology/{name}/version/mapping/{ID}/assertion/testCustomSQLQuery
      operationId: >-
        post__owlOntology_name_version_mapping_ID_ass_testCustomSQLQuery_from_mapAssertion
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: bufferSize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: dataSourceName
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingAssertion'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/typeCheckingReport:
    get:
      tags:
        - mappings_Test
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/assertion/{mapID}/typeCheckingReport
      operationId: get__owlOntology_name_version_mapping_ID_ass_typeCheckingReport
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: dataSourceName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/view/{viewName}/parameters:
    get:
      tags:
        - mappings_SQLView
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/view/{viewName}/parameters
      operationId: get__owlOntology_name_version_mapping_ID_view_parameters
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: viewName
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/parameter/{paramName}/views:
    get:
      tags:
        - mappings_Parameters
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/parameter/{paramName}/views
      operationId: get__owlOntology_name_version_mapping_ID_parameter_views
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: paramName
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{ID}/parameter/{paramName}/assertions:
    get:
      tags:
        - mappings_Parameters
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{ID}/parameter/{paramName}/assertions
      operationId: get__owlOntology_name_version_mapping_ID_parameter_assertions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: paramName
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/query/{queryID}/delete:
    delete:
      summary: >-
        DELETE
        mwsx/owlOntology/{name}/version/mapping/{mapID}/query/{queryID}/delete
      operationId: delete__owlOntology_name_version_query_ID_stop
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      tags:
        - mappings_other
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/suggestedTemplate/{entityID}:
    get:
      tags:
        - mappings_Template
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{mapID}/suggestedTemplate/{entityID}
      operationId: get__owlOntology_name_version_mapID_suggestedTemplate_entityID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: entityID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: projection
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MappingTemplatePrompt'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/dataLineage/{entityID}:
    get:
      tags:
        - mappings_DataLineage
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{mapID}/dataLineage/{entityID}
      operationId: get__owlOntology_name_version_mapID_entityID_dataLineage
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: entityID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: projection
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataLineageDescription'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/dataLineageProperty/{entityID}:
    get:
      tags:
        - mappings_DataLineage
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{mapID}/dataLineageProperty/{entityID}
      operationId: get__owlOntology_name_version_mapID_entityID_dataLineageProperty
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: entityID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataLineagePropertyDescription'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/dataLineageAnnotationProperty:
    get:
      tags:
        - mappings_DataLineage
      summary: >-
        GET
        mwsx/owlOntology/{name}/version/mapping/{mapID}/dataLineageAnnotationProperty
      operationId: >-
        get__owlOntology_name_version_mapID_entityID_dataLineageAnnotationProperty
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: annotationPropertyIRI
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataLineageDescription'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{name}:
    get:
      tags:
        - datasources_Persistence
      summary: Returns the data source information by its name
      operationId: get__datasource
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - datasources_Persistence
      summary: Modifies the data source information by its name
      operationId: put__datasource
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - datasources_Persistence
      summary: Deletes a data source information by its name
      operationId: delete__datasource
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{name}/downloadMetadata:
    get:
      tags:
        - datasources_Metadata
      summary: Returns the data source information by its name
      operationId: get__datasource_downloadMetadata
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{name}/metadata:
    get:
      tags:
        - datasources_Metadata
      summary: Returns the data source information by its name
      operationId: get__datasource_metadata
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceMetadata'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{name}/updateMetadata:
    put:
      tags:
        - datasources_Metadata
      summary: >-
        Updates the data source metadata information retrieving it from the JDBC
        connection
      operationId: put__datasource_updateMetadata
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: schemasList
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceMetadata'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{name}/uploadMetadata:
    put:
      tags:
        - datasources_Metadata
      summary: >-
        Uploads the data source metadata information for the specified
        datasource
      operationId: put__datasource_uploadMetadata
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXDataSourceMetadata'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceMetadata'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource:
    post:
      tags:
        - datasources_Persistence
      summary: Creates a new data source information
      operationId: post__datasource
      parameters:
        - name: buildSchema
          in: query
          required: true
          schema:
            type: boolean
        - name: schemasList
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - datasources_Persistence
      summary: Returns all the data source definitions available
      operationId: get__datasource_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - datasources_Persistence
      summary: Deletes all the available data source information
      operationId: delete__all_datasource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/drivers:
    get:
      tags:
        - datasources_Drivers
      summary: Returns the list of available JDBC driver class names
      operationId: get__datasource_driver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/test:
    post:
      tags:
        - datasources_Test
      summary: Test a given data source connection
      operationId: testDatasource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceTables'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/schemas:
    post:
      tags:
        - datasources_Metadata
      summary: Returns the list of schema names available at the datasource
      operationId: getDatasourceSchemas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{id}/schemas:
    get:
      tags:
        - datasources_Metadata
      summary: >-
        Returns the list of schemas available in the catalog of a given
        datasource
      operationId: getSchemas
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/schema/{schemaName}/tableNames:
    post:
      tags:
        - datasources_Metadata
      summary: >-
        Returns the list of table names available at the datasource within the
        provided schema name
      operationId: getDatasourceTablesForSchema
      parameters:
        - name: schemaName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceTableInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{id}/tables:
    get:
      tags:
        - datasources_Metadata
      summary: >-
        Returns the list of SourceTables available in the catalog of a given
        datasource
      operationId: getTables
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceTables'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{id}/tables/results:
    post:
      tags:
        - datasources_Test
      summary: Returns the preview of a given SQLQuery executed over a given datasource
      operationId: postSQLEx
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableContentPreview'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /datasource/{id}/table/{tableName}:
    get:
      tags:
        - datasources_Metadata
      summary: >-
        Returns the source table info available for the table tableName in the
        catalog of a given datasource
      operationId: getTable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceTableInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoints:
    get:
      tags:
        - endpoints_Persistence
      summary: Returns all available endpoints
      operationId: get_endpoints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoints'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - endpoints_Persistence
      summary: Deletes all available endpoints
      operationId: delete_endpoints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoints'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoints/referencing/owlOntology/{name}/version:
    get:
      tags:
        - endpoints_Referring
      summary: >-
        Returns all available endpoints defined on a given ontology name and
        ontology version
      operationId: get_endpoints_referencing_onto
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoints'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoints/referencing/owlOntology/{name}/version/mapping/{ID}:
    get:
      tags:
        - endpoints_Referring
      summary: >-
        Returns all available endpoints defined on a given ontology name,
        ontology version and mapping
      operationId: get_endpoints_referencing_onto_mapping
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoints'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoints/referencing/datasource/{name}:
    get:
      tags:
        - endpoints_Referring
      summary: >-
        Returns all available endpoints that are defined for a specific
        datasource
      operationId: get_endpoints_referencing_datasource
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoints'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoints/running:
    get:
      tags:
        - endpoints_Persistence
      summary: Returns all endpoints with status running
      operationId: get_running_endpoints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoints'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}:
    get:
      tags:
        - endpoints_Persistence
      summary: Returns an endpoint by its name
      operationId: get_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - endpoints_Persistence
      summary: Deletes the endpoint by its name
      operationId: delete_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - endpoints_Persistence
      summary: Updates the endpoint with the new values provided
      operationId: put_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Endpoint'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint:
    post:
      tags:
        - endpoints_Persistence
      summary: Creates a new endpoint
      operationId: post_endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoint'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/prefixes:
    get:
      tags:
        - endpoints_Info
      summary: Returns the set of prefixes that are relevant for a given endpoint
      operationId: get__owlOntology_name_version_mapping_ID_prefixes
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prefix'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/start:
    put:
      tags:
        - endpoints_Status
      summary: Starts the given endpoint, returns 0 if the operation succeeds
      operationId: start_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MastroProperties'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/stop:
    put:
      tags:
        - endpoints_Status
      summary: Stops the given endpoint, returns 0 if the stop operation succeeds
      operationId: stop_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/status:
    get:
      tags:
        - endpoints_Status
      summary: Returns the status of the given endpoint
      operationId: get_endpoint_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/empties:
    get:
      tags:
        - endpoints_Empties
      summary: Returns the collection of empty entities relevant for the given endpoint
      operationId: get_endpoint_empties
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyEntities'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/emptyUnfoldingEntities:
    get:
      tags:
        - endpoints_Empties
      summary: >-
        Returns the collection of entities with empty unfolding that are
        relevant for the given endpoint
      operationId: get_endpoint_empty_unfolding_entities
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyUnfoldingEntities'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/highlights/annotations:
    get:
      tags:
        - endpoints_Highlights
      summary: >-
        Returns the collection of entities with empty unfolding that are
        relevant for the given endpoint
      operationId: get_endpoint_highlights_annotations
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: classIRI
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/count/{queryId}/stop:
    put:
      tags:
        - endpoints_QueryCount
      summary: Forces the count thread of the given SPARQL query to stop
      operationId: get_query_count_stop
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/count/{queryId}:
    delete:
      tags:
        - endpoints_QueryCount
      summary: Deletes the count thread on the given endpoint for a SPARQL query
      operationId: delete_query_count
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/count/{queryId}/result:
    get:
      tags:
        - endpoints_QueryCount
      summary: >-
        Returns the counts the results of a SPARQL query executed on the given
        endpoint
      operationId: get_query_count_result
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/check:
    post:
      tags:
        - endpoints_Query
      summary: Checks the syntax of the passed query on the given endpoint
      operationId: check_query_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/quarantinedMappingsByEntity:
    post:
      tags:
        - endpoints_Query
      summary: >-
        Given a SPARQL query, returns a map with entity as key and a set of
        quarantined mapping identifiers as a value
      operationId: check_query_on_endpoint_for_quarantinedMappings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/start:
    post:
      tags:
        - endpoints_Query
      summary: Starts a new instance of a query on the given endpoint
      operationId: start_catalog_query_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: reasoning
          in: query
          required: true
          schema:
            type: boolean
        - name: expandSparqlTables
          in: query
          required: true
          schema:
            type: boolean
        - name: querySemantics
          in: query
          required: true
          schema:
            type: string
        - name: answersBufferSize
          in: query
          required: true
          schema:
            type: string
        - name: skipSqlEvaluation
          in: query
          required: true
          schema:
            type: string
        - name: useReplaceForUrlEncoding
          in: query
          required: true
          schema:
            type: string
        - name: filterNullValuesOnIri
          in: query
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: true
          schema:
            type: string
        - name: agent
          in: query
          required: true
          schema:
            type: string
        - name: unfolderCountThreshold
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              description: Mapping parameters values
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDARunQueryInstance'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/stop:
    put:
      tags:
        - endpoints_Query
      summary: Forces the termination of the query running on the given endpoint
      operationId: stop_catalog_query_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/exportFile:
    get:
      tags:
        - endpoints_Query
      summary: >-
        Returns the file containing exported results for a query on the given
        endpoint
      operationId: export_catalog_query_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/fullSparqlDetails:
    get:
      tags:
        - endpoints_Query
      summary: Returns the report of a Full Sparql query executed on the given endpoint
      operationId: get_eqldeatils_catalog_query_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXFullSparqlQueryReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/ontologyRewritings:
    get:
      tags:
        - endpoints_Query
      summary: Returns the ontology rewriting of a query executed on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_ontologyRewritings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyRewritings'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/viewRewritings:
    get:
      tags:
        - endpoints_Query
      summary: Returns the view rewritings of a query executed on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_viewRewritings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewRewritings'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/viewOptimizedRewritings:
    get:
      tags:
        - endpoints_Query
      summary: >-
        Returns the optimized view rewritings of a query executed on the given
        endpoint
      operationId: get__owlOntology_name_version_query_ID_viewOptimizedRewritings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewRewritings'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/sqlRewritings:
    get:
      tags:
        - endpoints_Query
      summary: Returns the SQL rewritings of a query executed on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_sqlRewritings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlRewritings'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/sqlDebugRewritings:
    get:
      tags:
        - endpoints_Query
      summary: >-
        Returns the currently running SQL rewritings of a query executed on the
        given endpoint
      operationId: get__owlOntology_name_version_query_ID_sqlDebugRewritings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/results:
    get:
      tags:
        - endpoints_Query
      summary: >-
        Returns the results of the query running on the given endpoint, the
        results returned contain a page (pagenumber) of a given size (pagesize)
      operationId: get__owlOntology_name_version_query_ID_results
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/status:
    get:
      tags:
        - endpoints_Query
      summary: Returns the status of a query running on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/queryRecordInfos:
    get:
      tags:
        - endpoints_Query
      summary: >-
        Returns the query record info of all the queries running on the given
        endpoint
      operationId: get__owlOntology_name_version_query_ID_record_infos
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueryRecordInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{queryID}/queryRecordInfo:
    get:
      tags:
        - endpoints_Query
      summary: >-
        Returns the query record info of a certain query running on the given
        endpoint
      operationId: get__owlOntology_name_version_query_ID_record_info
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRecordInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/exportQueryResults:
    post:
      tags:
        - endpoints_ExportedQuery
      summary: >-
        Exports on a separate thread the results of a query running on the given
        endpoint, the export thread identifier is returned
      operationId: post__owlOntology_name_version_query_ID_export_results
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXExportInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/export/direct:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: >-
        Returns the stream of the results of a query running on the given
        endpoint
      operationId: post__owlOntology_name_version_query_ID_export_directcsv
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: exportInfo
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThreads:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: Returns the export thread identifiers available on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_export_threads
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exported:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: >-
        Returns the collection of export information available for the given
        endpoint
      operationId: get__owlOntology_name_version_query_ID_exported
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MWSXExportInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exported/{fileName}:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: Returns the content of an export file for the given endpoint
      operationId: get__owlOntology_name_version_query_ID_exported_fileName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fileName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - endpoints_ExportedQuery
      summary: >-
        Deletes the export file for the given endpoint from the server, returns
        0 in the deletion succeeded
      operationId: delete__owlOntology_name_version_query_ID_exported_fileName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fileName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThread/{id}/status:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: Returns the status of an export thread running on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_export_thread_id_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThread/{id}/errors:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: Returns the status of an export thread running on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_export_thread_id_errors
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThread/{id}/stop:
    put:
      tags:
        - endpoints_ExportedQuery
      summary: Stops the execution of an export thread on the given endpoint
      operationId: put__owlOntology_name_version_query_ID_export_thread_id_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThread/{id}/stats:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: Returns statistics of an export thread running on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_export_thread_id_stats
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXExportStats'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThread/{id}/file:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: Streams the file content of an export thread run on the given endpoint
      operationId: get__owlOntology_name_version_query_ID_export_thread_id_file
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThread/{id}/preview/{lines}:
    get:
      tags:
        - endpoints_ExportedQuery
      summary: Returns the first 'lines' lines of the exported file content
      operationId: get__owlOntology_name_version_query_ID_export_thread_id_preview
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: lines
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsvPreview'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/exportThread/{id}:
    delete:
      tags:
        - endpoints_ExportedQuery
      summary: DELETE mwsx/endpoint/{name}/exportThread/{id}
      operationId: delete__owlOntology_name_version_query_ID_export_thread_id
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/start:
    post:
      tags:
        - endpoints_ConstructQuery
      summary: Starts the SPARQL construct query on the given endpoint
      operationId: post__owlOntology_name_version_construct_query_start
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: reasoning
          in: query
          required: true
          schema:
            type: boolean
        - name: expandSparqlTables
          in: query
          required: true
          schema:
            type: boolean
        - name: querySemantics
          in: query
          required: true
          schema:
            type: string
        - name: answersBufferSize
          in: query
          required: true
          schema:
            type: string
        - name: skipSqlEvaluation
          in: query
          required: true
          schema:
            type: string
        - name: useReplaceForUrlEncoding
          in: query
          required: true
          schema:
            type: string
        - name: filterNullValuesOnIri
          in: query
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: true
          schema:
            type: string
        - name: agent
          in: query
          required: true
          schema:
            type: string
        - name: unfolderCountThreshold
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDARunQueryInstance'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/{queryID}/start:
    post:
      tags:
        - endpoints_ConstructQuery
      summary: >-
        Starts the construct query with the provided identified on the given
        endpoint
      operationId: post__owlOntology_name_version_construct_query_ID_start
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: reasoning
          in: query
          required: true
          schema:
            type: boolean
        - name: expandSparqlTables
          in: query
          required: true
          schema:
            type: boolean
        - name: querySemantics
          in: query
          required: true
          schema:
            type: string
        - name: answersBufferSize
          in: query
          required: true
          schema:
            type: string
        - name: skipSqlEvaluation
          in: query
          required: true
          schema:
            type: string
        - name: useReplaceForUrlEncoding
          in: query
          required: true
          schema:
            type: string
        - name: filterNullValuesOnIri
          in: query
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: true
          schema:
            type: string
        - name: agent
          in: query
          required: true
          schema:
            type: string
        - name: unfolderCountThreshold
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              description: Mapping parameters values
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDARunQueryInstance'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/{queryID}/status:
    get:
      tags:
        - endpoints_ConstructQuery
      summary: Returns the execution status of construct query on the given endpoint
      operationId: get__owlOntology_name_version_construct_query_ID_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/exportQueryResults:
    post:
      tags:
        - endpoints_ConstructQuery
      summary: >-
        Starts the export thread for a construct query on the given endpoint,
        the export thread identifier is returned
      operationId: post__owlOntology_name_version_cquery_ID_export_results
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXExportInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/{queryID}/export:
    get:
      tags:
        - endpoints_ConstructQuery
      summary: >-
        Returns the file content of the export thread of a construct query
        running on the given endpoint
      operationId: get__owlOntology_name_version_construct_query_ID_export
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/{queryID}/results:
    get:
      tags:
        - endpoints_ConstructQuery
      summary: >-
        Returns a page of a given size of results of a construct query running
        on the given endpoint
      operationId: get__owlOntology_name_version_construct_query_ID_results
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/{queryID}/results/triples:
    get:
      tags:
        - endpoints_ConstructQuery
      summary: Returns the results for a given construct query in a triples format
      operationId: get__owlOntology_name_version_construct_query_ID_results_triples
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConstructImage'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/{queryID}/results/tabular:
    get:
      tags:
        - endpoints_ConstructQuery
      summary: Returns the results for a given construct query in tabular format
      operationId: get__owlOntology_name_version_construct_query_ID_results_tabular
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: pagenumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/cquery/{queryID}/results/rdfGraph:
    get:
      tags:
        - endpoints_VKG
      summary: Returns the results for a given construct query in tabular format
      operationId: getOwlOntologyNameVersionConstructQueryIDResultsRdfGraph
      parameters:
        - name: name
          description: Endpoint name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          description: Query execution id
          in: path
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
        - name: pageNumber
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RDFGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/countEntityInstances:
    get:
      tags:
        - endpoints_CountEntityInstances
      summary: >-
        Count the number of instances of the Class or the Object Property of the
        ontology
      operationId: get__endpoint_instances
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
        - name: classIRI
          in: query
          required: true
          schema:
            type: string
        - name: objectPropertyIRI
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/countEntityInstances/start:
    get:
      tags:
        - endpoints_CountEntityInstances
      summary: >-
        Starts the executions of the queries that will count the number of
        instances of each Class and Object Property of the ontology
      operationId: get__start_endpoint_entity_instances
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/countEntityInstances/stop:
    get:
      tags:
        - endpoints_CountEntityInstances
      summary: >-
        Starts the executions of the queries that will count the number of
        instances of each Class of the ontology
      operationId: get__stop_endpoint_entity_instances
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/countEntityInstances/info:
    get:
      tags:
        - endpoints_CountEntityInstances
      summary: >-
        Get the info about the queries that will count the number of instances
        of each Class of the ontology
      operationId: get__endpoint_entity_instances_info
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountEntityInstancesInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/instanceChecking/start:
    post:
      tags:
        - endpoints_InstanceChecking
      summary: >-
        Starts the executions of the queries that will count the number of
        instances of each Class of the ontology
      operationId: get__start_endpoint_instance_checking
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
        - name: instance
          in: query
          required: true
          schema:
            type: string
        - name: filterFathers
          in: query
          required: true
          schema:
            type: boolean
            default: 'true'
        - name: filterNonMatchingTemplates
          in: query
          required: true
          schema:
            type: boolean
            default: 'true'
        - name: stopOnFirstMatch
          in: query
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/instanceChecking/{threadId}/stop:
    get:
      tags:
        - endpoints_InstanceChecking
      summary: >-
        Starts the executions of the queries that will count the number of
        instances of each Class of the ontology
      operationId: get__stop_endpoint_instance_checking
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/instanceChecking/{threadId}/info:
    get:
      tags:
        - endpoints_InstanceChecking
      summary: >-
        Get the info about the queries that will count the number of instances
        of each Class of the ontology
      operationId: get__endpoint_class_instance_checking
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
        - name: threadId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceCheckingInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/minMaxDataproperties/start:
    get:
      tags:
        - endpoints_MinMaxDataProperties
      summary: >-
        Starts the executions of the queries that will count the number of
        instances of each Class and Object Property of the ontology
      operationId: get__start_endpoint_min_max_dataproperties
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/minMaxDataproperties/stop:
    get:
      tags:
        - endpoints_MinMaxDataProperties
      summary: >-
        Starts the executions of the queries that will count the number of
        instances of each Class of the ontology
      operationId: get__stop_endpoint_min_max_dataproperties
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/minMaxDataproperties/info:
    get:
      tags:
        - endpoints_MinMaxDataProperties
      summary: >-
        Get the info about the queries that will count the number of instances
        of each Class of the ontology
      operationId: get__endpoint_min_max_dataproperties
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinMaxDatapropertiesInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/queries:
    get:
      tags:
        - endpoints_Query
      summary: >-
        Returns the current state of all the queries in status
        <code>status</code> loaded in the endpoint named <code>name</code>
      operationId: list_query_statuses_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SPARQLStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/queries/ids:
    get:
      tags:
        - endpoints_Query
      summary: Returns the IDs of queries loaded in the given endpoint
      operationId: list_query_ids_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/{executionId}:
    delete:
      tags:
        - endpoints_Query
      summary: Returns the IDs of queries loaded in the given endpoint
      operationId: delete_query_execution_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/start:
    post:
      tags:
        - endpoints_Query
      summary: Starts a new query
      operationId: start_new_query_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: reasoning
          in: query
          required: true
          schema:
            type: boolean
        - name: expandSparqlTables
          in: query
          required: true
          schema:
            type: boolean
        - name: querySemantics
          in: query
          required: true
          schema:
            type: string
        - name: answersBufferSize
          in: query
          required: true
          schema:
            type: string
        - name: skipSqlEvaluation
          in: query
          required: true
          schema:
            type: string
        - name: useReplaceForUrlEncoding
          in: query
          required: true
          schema:
            type: string
        - name: filterNullValuesOnIri
          in: query
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: true
          schema:
            type: string
        - name: agent
          in: query
          required: true
          schema:
            type: string
        - name: unfolderCountThreshold
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDARunQueryInstance'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/start-sync:
    post:
      tags:
        - endpoints_Query
      summary: Starts a new query in synchronous mode on the given endpoint
      operationId: start_new_sync_query_on_endpoint
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: reasoning
          in: query
          required: true
          schema:
            type: boolean
        - name: expandSparqlTables
          in: query
          required: true
          schema:
            type: boolean
        - name: querySemantics
          in: query
          required: true
          schema:
            type: string
        - name: answersBufferSize
          in: query
          required: true
          schema:
            type: string
        - name: skipSqlEvaluation
          in: query
          required: true
          schema:
            type: string
        - name: useReplaceForUrlEncoding
          in: query
          required: true
          schema:
            type: string
        - name: filterNullValuesOnIri
          in: query
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: true
          schema:
            type: string
        - name: agent
          in: query
          required: true
          schema:
            type: string
        - name: unfolderCountThreshold
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/count:
    post:
      tags:
        - endpoints_QueryCount
      summary: Counts the results of the given SPARQL query
      operationId: start_new_query_on_count
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: reasoning
          in: query
          required: true
          schema:
            type: boolean
        - name: expandSparqlTables
          in: query
          required: true
          schema:
            type: boolean
        - name: querySemantics
          in: query
          required: true
          schema:
            type: string
        - name: agent
          in: query
          required: true
          schema:
            type: string
        - name: unfolderCountThreshold
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDARunQueryInstance'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/count/{queryId}/state:
    get:
      tags:
        - endpoints_QueryCount
      summary: Returns the current state of the count thread for the given SPARQL query
      operationId: get_query_count_state
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/query/count/{queryId}/error:
    get:
      tags:
        - endpoints_QueryCount
      summary: Returns the current state of the count thread for the given SPARQL query
      operationId: get_query_count_error
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/mappingAnalysisReport:
    get:
      tags:
        - endpoints_MappingAnalysis
      summary: GET mwsx/endpoint/{eName}/mappingAnalysisReport
      operationId: get__owlOntology_name_version_mapping_ID_analysisReport
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXMappingReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{eName}/saturetedOntology:
    post:
      tags:
        - endpoints_Info
      summary: POST mwsx/endpoint/{eName}/saturetedOntology
      operationId: get__endpoint_ename_saturetedOntology
      parameters:
        - name: eName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OntologySaturationParameters'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{endpointName}/highligthsSharedViewsProps:
    get:
      tags:
        - endpoints_VKG
      summary: >-
        Get the IRIs of the ontology entities "related" to the clicked and
        selected grouped by the views their mappings referes to.
      description: >-
        This route is used by the VKG to ask properties of an instance creating
        a query for each group of properties sharing a view. Shared views by
        entities are computed based on the mappings of the specified endpoint.
        -- The neighbours can be classes (brother classes or child classes),
        object properties (the class or one of his father partecipate or are
        typed to domain/range) or data properties (the class or one of its
        fathers partecipates or is typed to its domain).
      operationId: highligthsSharedViewsProps
      parameters:
        - name: endpointName
          in: path
          description: The name of the endpoint
          required: true
          schema:
            type: string
        - name: clickedClassIRI
          in: query
          description: The IRI of the class just clicked on the GRAPHOLscape ontology graph
          required: true
          schema:
            type: string
        - name: params
          in: query
          description: >-
            Possible value: `subClassOnly` in order to get only the subclasses
            of the clicked class
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HighlightsSharedViews'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog:
    get:
      tags:
        - query-catalog_Persistence
      summary: >-
        Returns the query catalog available for the given version of the
        ontology
      operationId: get__owlOntology_name_version_querycatalog
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDACatalog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - query-catalog_Persistence
      summary: >-
        Deletes the query catalog available for the given version of the
        ontology
      operationId: delete__owlOntology_name_version_querycatalog
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/converted2sparqling:
    get:
      tags:
        - query-catalog_Utils
      summary: >-
        Returns a list of SparqlingSPARQLQuery obtaining converted the
        SPARQLQuery queries available in the catalog to SparqlingSPARQLQuery
      operationId: get__owlOntology_name_version_querycatalog_converted2spargling
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SparqlingSPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/query/{queryID}/publication:
    post:
      tags:
        - query-catalog_Publication
      summary: Requires the publication of a query from a given user catalog
      operationId: post__owlOntology_name_version_querycatalog_request_publication
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/publicationRequests:
    get:
      tags:
        - query-catalog_Publication
      summary: Requires the publication of a query from a given user catalog
      operationId: get__owlOntology_name_version_querycatalog_request_publication
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/{userCatalog}/query/{queryID}/publication:
    put:
      tags:
        - query-catalog_Publication
      summary: >-
        Accept the publication of a query for which a publication request has
        been formerly requested
      operationId: put__owlOntology_name_version_querycatalog_accept_publication
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: userCatalog
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: accept
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - query-catalog_Publication
      summary: >-
        Accept the publication of a query for which a publication request has
        been formerly requested
      operationId: delete__owlOntology_name_version_querycatalog_accept_publication
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: userCatalog
          in: path
          required: true
          schema:
            type: string
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/export:
    get:
      tags:
        - query-catalog_Persistence
      summary: Exports the ontology catalog returning its JSON representation
      operationId: get__owlOntology_name_version_querycatalog_export
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/import:
    post:
      tags:
        - query-catalog_Persistence
      summary: >-
        Imports a new catalog for the given version of the ontology: if the
        additive switch is true, all new queries will be added to the existing
        ones, otherwise the old catalog will be overwritten
      operationId: get__owlOntology_name_version_querycatalog_import
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: additive
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDACatalog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/sparqling/import:
    post:
      tags:
        - query-catalog_Persistence
      summary: >-
        Imports a new catalog of SPARQLING queries: if the additive switch is
        true, all new queries will be added to the existing ones, otherwise the
        old catalog will be overwritten
      operationId: post__owlOntology_name_version_querycatalog_sparqling_import
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: additive
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDASparqlingCatalog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/sparqling/migrate:
    post:
      tags:
        - query-catalog_Persistence
      summary: >-
        Migrates a query catalog of SPARQLING queries between two ontology
        versions
      operationId: post__owlOntology_name_version_querycatalog_sparqling_migrate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: targetVersion
          in: query
          required: true
          schema:
            type: string
        - name: resetPublicationInfos
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDASparqlingCatalog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/sparqling:
    delete:
      tags:
        - query-catalog_Persistence
      summary: >-
        Deletes the catalog of SPARQLING queries available for this version of
        the ontology
      operationId: delete__owlOntology_name_version_querycatalog_sparqling
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/querycatalog/sparqling/export:
    get:
      tags:
        - query-catalog_Persistence
      summary: Exports the SPARQLING query catalog
      operationId: get__owlOntology_name_version_querycatalog_sparqling_export
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/query/{ID}:
    get:
      tags:
        - query-catalog_Persistence
      summary: Returns the SPARQLQuery identified by the passed ID value
      operationId: get__owlOntology_name_version_query_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - query-catalog_Persistence
      summary: Updates the definition of a specific query within the available catalog
      operationId: put__owlOntology_name_version_query_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - query-catalog_Persistence
      summary: >-
        Removes a specific query from the catalog available for this version of
        the ontology
      operationId: delete__owlOntology_name_version_query_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/query:
    post:
      tags:
        - query-catalog_Persistence
      summary: Adds a new query to the catalog
      operationId: post__owlOntology_name_version_query_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/queries/sparqling:
    get:
      tags:
        - query-catalog_Persistence
      summary: Returns a list of the SPARQLING queries currently stored in the catalog
      operationId: get__owlOntology_name_version_queries_sparqling
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SparqlingSPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/query/sparqling/{ID}:
    get:
      tags:
        - query-catalog_Persistence
      summary: Returns the query identified by ID
      operationId: get__owlOntology_name_version_query_sparqling_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingSPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - query-catalog_Persistence
      summary: Updates the definition of the given query
      operationId: put__owlOntology_name_version_query_sparqling_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SparqlingSPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingSPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - query-catalog_Persistence
      summary: Remove the query identified by ID from the current catalog
      operationId: delete__owlOntology_name_version_query_sparqling_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: ID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingSPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/query/sparqling:
    post:
      tags:
        - query-catalog_Persistence
      summary: Adds a new SPARQLING query to the catalog
      operationId: post__owlOntology_name_version_query_sparqling_ID
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SparqlingSPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingSPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/highlights:
    get:
      tags:
        - sparqling_OntologyGraph
      summary: >-
        Get the IRIs of the ontology entities "related" to the clicked and
        selected.
      description: >-
        This route is used to highlight the negihbours of the selected class.
        The neighbours can be classes (brother classes or child classes), object
        properties (the class or one of his father partecipate or are typed to
        domain/range) or data properties (the class or one of its fathers
        partecipates or is typed to its domain).
      operationId: highligths
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: clickedClassIRI
          in: query
          description: The IRI of the class just clicked on the GRAPHOLscape ontology graph
          required: true
          schema:
            type: string
        - name: params
          in: query
          description: >-
            Possible value: `subClassOnly` in order to get only the subclasses
            of the clicked class
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Highlights'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/highlights/paths:
    get:
      tags:
        - sparqling_OntologyGraph
      summary: Find paths between selected class and clicked class.
      description: >-
        The results should be based on Dijkstra algorithm for shortest paths.
        ISA wieght is 0 while role weight is 1.
      operationId: highligthsSharedViewsDataProps
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: lastSelectedIRI
          in: query
          description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
          required: true
          schema:
            type: string
        - name: clickedIRI
          in: query
          description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
          required: true
          schema:
            type: string
        - name: kShortest
          in: query
          description: Use the k-shortest algorithm to return the shortestpaths
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyMultiPath'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/highlights/paths/thread/start:
    post:
      tags:
        - sparqling_Highlights
      summary: Start a thread computing a shortest path on the ontology
      operationId: post_shortest_path_thread_start
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: lastSelectedIRI
          in: query
          required: true
          schema:
            type: string
        - name: clickedIRI
          in: query
          required: true
          schema:
            type: string
        - name: kShortest
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/highlights/paths/thread/stop:
    post:
      tags:
        - sparqling_Highlights
      summary: Stop the thread computing a shortest path on the ontology
      operationId: post_shortest_path_thread_stop
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: threadId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/highlights/paths/thread/result:
    get:
      tags:
        - sparqling_Highlights
      summary: >-
        GET results of a thread computing ontology paths with multi edges over a
        given ontology
      operationId: get_shortest_path_thread_result
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: threadId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyMultiPath'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/highlights/paths/thread/state:
    get:
      tags:
        - sparqling_Highlights
      summary: Get the state of the thread computing a shortest path on the ontology
      operationId: get_shortest_path_thread_state
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: threadId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/highlights/paths/thread/error:
    get:
      tags:
        - sparqling_Highlights
      summary: Get the error of a thread computing a shortest path on the ontology
      operationId: get_shortest_path_thread_error
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: threadId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node:
    get:
      tags:
        - sparqling_QueryGraphBGP
      summary: This is the first route to call in order to build the query graph.
      description: >-
        Starting from only the clicked class get the query graph that will be
        rendered by Sparqling, the query head, the sparql code. The sparql query
        returned will be somthing like `select ?x { ?x a <clickedClassIRI>` }.
        The variable `?x` should be called according to the entity remainder or
        label. The variable will be added to the head of the query in order to
        create a valid SPARQL query.
      operationId: getQueryGraph
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: clickedClassIRI
          in: query
          description: The IRI of the entity clicked on the GRAPHOLscape ontology graph
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/class/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: >-
        Starting from the current query graph continue to build the query graph
        through a class.
      description: >-
        This call is used when the user click on a highlighted class and should
        add a triple pattern of the form like `?x rdf:type <targetClassIRI>`.
        The server should find `?x` in the SPARQL code as the variable
        associated to the `sourceClassIRI`.
      operationId: putQueryGraphClass
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The id of the node of the selected class in the query graph.
          required: true
          schema:
            type: string
        - name: sourceClassIRI
          in: query
          description: >-
            The IRI of the last selected class. It could be selected from the
            ontology graph or from the query graph.
          required: true
          schema:
            type: string
        - name: targetClassIRI
          in: query
          description: The IRI of the entity clicked on the GRAPHOLscape ontology graph.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/objectProperty/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: >-
        Starting from the current query graph continue to build the query graph
        through a object property.
      description: >-
        This route is used when the user click a highlighted object property
        with ornly one `relatedClasses` or, in the case of more than one
        `relatedClasses` immediatly after choosing one of them. In this case the
        triple pattern to add is something like `?x <predicateIRI> ?y` where
        `?x` and `?y` should be derived from the direction indicated by
        `isPredicateDirect` of the object property with respect to
        `sourceClassIRI` and `targetClassIRI`. If there is a cyclic object
        property the user also should specify the direction if order to
        correctly assign `?x` and `?y`. Either `?x` or `?y` should be a fresh
        new variable which should be linked to a new triple pattern `?y rdf:type
        <targetClassIRI>`. The variable `?y` should be called according to the
        entity remainder or label and should add a counter if there is an
        already defined variable for that class.
      operationId: putQueryGraphObjectProperty
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The id of the node of the selected class in the query graph.
          required: true
          schema:
            type: string
        - name: sourceClassIRI
          in: query
          description: >-
            The IRI of the last selected class. It could be selected from the
            ontology graph or from the query graph.
          required: true
          schema:
            type: string
        - name: predicateIRI
          in: query
          description: The IRI of the predicate which links source class and target class
          required: true
          schema:
            type: string
        - name: targetClassIRI
          in: query
          description: The IRI of the entity clicked on the GRAPHOLscape ontology graph.
          required: true
          schema:
            type: string
        - name: isPredicateDirect
          in: query
          required: true
          description: >-
            If true sourceClassIRI is the domain of predicateIRI, if false
            sourceClassIRI is the range of predicateIRI.
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/dataProperty/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: >-
        Starting from the current query graph continue to build the query graph
        through a data property.
      description: >-
        This route is used when the user click a highlighted data property. The
        triple pattern to add is something like `?x <predicateIRI> ?y` where
        `?x` should be derived from `selectedClassIRI`. Note that `?y` is fresh
        new variable that should be added also to the head of the query (we
        assume data property values are interesting). The variable `?y` should
        be called according to the entity remainder or label and should add a
        counter if there is an already defined variable for that data property.
      operationId: putQueryGraphDataProperty
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The id of the node of the selected class in the query graph.
          required: true
          schema:
            type: string
        - name: sourceClassIRI
          in: query
          description: >-
            The IRI of the last selected class. It could be selected from the
            ontology graph or from the query graph.
          required: true
          schema:
            type: string
        - name: predicateIRI
          in: query
          description: The IRI of the clicked data property.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/annotation/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: >-
        Starting from the current query graph continue to build the query graph
        through a data property.
      description: >-
        This route is used when the user click a highlighted data property. The
        triple pattern to add is something like `?x <predicateIRI> ?y` where
        `?x` should be derived from `selectedClassIRI`. Note that `?y` is fresh
        new variable that should be added also to the head of the query (we
        assume data property values are interesting). The variable `?y` should
        be called according to the entity remainder or label and should add a
        counter if there is an already defined variable for that data property.
      operationId: putQueryGraphAnnotation
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The id of the node of the selected class in the query graph.
          required: true
          schema:
            type: string
        - name: sourceClassIRI
          in: query
          description: >-
            The IRI of the last selected class. It could be selected from the
            ontology graph or from the query graph.
          required: true
          schema:
            type: string
        - name: predicateIRI
          in: query
          description: The IRI of the clicked data property.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/join/{graphElementId1}/{graphElementId2}:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: Join two GraphNodeElement in one.
      description: >-
        Starting from a query graph which has two nodes representing the same
        class(es), it returns the query graph in which the two nodes have been
        joined into a single one. The children of the selected nodes will be
        grouped in `graphElementId1` and each time we add a children through the
        previous routes they will be added to this node.
      operationId: putQueryGraphJoin
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId1
          in: path
          description: The id of the node of the selected class in the query graph.
          required: true
          schema:
            type: string
        - name: graphElementId2
          in: path
          description: The id of the node of the selected class in the query graph.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/delete/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: >-
        Delete the GraphElement (and all its children) from the query graph and
        head.
      description: >-
        This route is used when the user wants to delete a node from the query
        graph. All the children of this node will be deleted as well as we do
        not want to create query with completly separated branches. All the
        variables that are going to be deleted should also be deleted from the
        head of the query. **WARNING**, if the node has multiple occurrences
        (due to join operations) every node should be deleted.
      operationId: deleteGraphElementId
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The GraphElement that should be deleted
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/delete/{graphElementId}/class:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: Delete from GraphElement only the class
      operationId: deleteGraphElementIdClass
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          required: true
          schema:
            type: string
        - name: classIRI
          in: query
          description: The class that should be deleted
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/filter/{filterId}:
    put:
      tags:
        - sparqling_QueryGraphFilter
      summary: Create a new filter in the query.
      description: Translate the filter at index `filterId` to a new filter in SPARQL.
      operationId: newFilter
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: filterId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/filter/edit/{filterId}:
    put:
      tags:
        - sparqling_QueryGraphFilter
      summary: Modify a filter in the query.
      description: Translate the filter at index `filterId` to a filter in SPARQL.
      operationId: editFilter
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: filterId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/filter/remove/{filterId}:
    put:
      tags:
        - sparqling_QueryGraphFilter
      summary: Remove the filter at index `filterId` from the query.
      operationId: removeFilter
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: filterId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/filter/remove/all:
    put:
      tags:
        - sparqling_QueryGraphFilter
      summary: Remove the filters.
      operationId: removeAllFilters
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/optional/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphOptional
      summary: Add the `graphElementId` to a new optional.
      description: >
        Create a new optional in the query and add the triple pattern(s)

        identified by the GraphElementId.


        - If it is a class the query parameter

        should be used and the triple pattern `?graphElementId rdf:type
        <classIRI>`

        will be moved from the bgp to the new optional.


        - If it is a data property

        the tp `?graphElementIdVar1 <graphElementIdDataPropertyIRI>
        ?graphElementIdVar2`

        will be added to the new optional.


        - If it is a object property the tps `?graphElementIdVar1
        <graphElementIdDataPropertyIRI> ?graphElementIdVar2. ?graphElementIdVar2
        rdf:type <classIRI>` till the leaves will be moved to the new optional.
      operationId: newOptionalGraphElementId
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The GraphElement that should be added to the optional
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/optional/remove/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphOptional
      summary: Remove the graphElementId from the optional and move it back to the bgp.
      description: >
        Remove the triple pattern(s) identified by the `graphElementId`

        from all the optional that contains the graphElementId.


        - If it is a class the query parameter

        should be used and the triple pattern `?graphElementId rdf:type
        <classIRI>`

        will be moved from the optional to the bgp.


        - If it is a data property

        the tp `?graphElementIdVar1 <graphElementIdDataPropertyIRI>
        ?graphElementIdVar2`

        will be moved from the optional to the bgp.


        - If it is a object property the tps `?graphElementIdVar1
        <graphElementIdDataPropertyIRI> ?graphElementIdVar2. ?graphElementIdVar2
        rdf:type <classIRI>` will be moved from the optional to the bgp.
      operationId: removeOptionalGraphElementId
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The GraphElement that should be removed from the optional
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/node/optional/remove/all:
    put:
      tags:
        - sparqling_QueryGraphOptional
      summary: Remove the optionals and move them back to the bgp.
      operationId: removeAllOptional
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: GraphElement not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/head/add/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphHead
      summary: Add the head term to the query graph.
      description: >-
        Explicitley add a term to the query head. All the data property
        variables are added automatically to the head during the query graph
        construction. This will add to the head only variables associated to
        classes (`rdf:type` triple pattern) or data properties.
      operationId: addHeadTerm
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The id of the graph node that should be added to the head
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Graph Node not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/head/delete/{headTerm}:
    put:
      tags:
        - sparqling_QueryGraphHead
      summary: Delete the head term from the query graph.
      description: The path param should be the id of the HeadElement.
      operationId: deleteHeadTerm
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: headTerm
          in: path
          description: The head term that should be deleted
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/head/rename/{headTerm}:
    put:
      tags:
        - sparqling_QueryGraphHead
      summary: Rename the head term from the query graph using alias.
      description: Put the alias in the HeadElement passed via request body.
      operationId: renameHeadTerm
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: headTerm
          in: path
          description: The head term that should be renamed
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/head/orderBy/{headTerm}:
    put:
      tags:
        - sparqling_QueryGraphHead
      summary: Order by the head from the query graph.
      description: The OrderBy object is passed in the request body in the Query Graph.
      operationId: orderByHeadTerm
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: headTerm
          in: path
          description: The head term that should be ordered
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/head/function/{headTerm}:
    put:
      tags:
        - sparqling_QueryGraphHead
      summary: Set a function to the head term from the query graph.
      description: >-
        The function is defined in the head term of the query graph in the
        request body. Remember to set the alias of the head based on function
        name and variable.
      operationId: functionHeadTerm
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: headTerm
          in: path
          description: The head term that should be involved inthe function
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/head/aggregation/{headTerm}:
    put:
      tags:
        - sparqling_QueryGraphHead
      summary: Set the aggregation function to the head term.
      description: >-
        The aggregation function is defined in the group by field of the query
        graph in the request body along with the HAVING clause. Remember to set
        the alias of the head based on function name and variable.
      operationId: aggregationHeadTerm
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: headTerm
          in: path
          description: The head term that should be involved in the aggregation function
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/head/reorderHeadTerms:
    put:
      tags:
        - sparqling_QueryGraphHead
      summary: Reorder the head elements accrding to Query GRaph object.
      operationId: reorderHeadTerms
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/distinct:
    put:
      tags:
        - sparqling_QueryGraphExtra
      summary: Set the distinct value.
      description: The distinct value is defined in the query graph in the request body.
      operationId: distinctQueryGraph
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: distinct
          in: query
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/countStar/{active}:
    put:
      tags:
        - sparqling_QueryGraphExtra
      summary: >-
        Create or remove an external query to the original one in order to count
        results.
      operationId: countStarQueryGraph
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: active
          in: path
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/limit:
    put:
      tags:
        - sparqling_QueryGraphExtra
      summary: Set the limit value.
      description: The limit value is defined in the query graph in the request body.
      operationId: limitQueryGraph
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/offset:
    put:
      tags:
        - sparqling_QueryGraphExtra
      summary: Set the offset value.
      description: The offset value is defined in the query graph in the request body.
      operationId: offsetQueryGraph
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: offset
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Head term not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/path/{graphElementId}:
    put:
      tags:
        - sparqling_QueryGraphBGP
      summary: >-
        Get the query graph that will be rendered by Sparqling, the query head,
        the sparql code based on the chosen path.
      description: >-
        This path should be used to build the query graph using the path
        interaction. As a result there will be added to the query several triple
        pattern (depending on the length of the path) as a sequence of classes
        and object properties. Data properties never appear in paths, in order
        to add them use the simple PUT route.
      operationId: addPathToQueryGraph
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: graphElementId
          in: path
          description: The id of the node of the selected class in the query graph.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                queryGraph:
                  $ref: '#/components/schemas/QueryGraph'
                ontologyPath:
                  $ref: '#/components/schemas/OntologyPath'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '400':
          description: Invalid IRI supplied
          content: {}
        '404':
          description: Entity not found
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/instanceShortestPath:
    post:
      tags:
        - sparqling_Construct
      summary: >-
        Return the CONSTRUCT query based on the shortest path between an
        instance and another instance or class
      operationId: instanceShortestPathPost
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
        - name: sourceInstanceIRI
          in: query
          schema:
            type: string
        - name: targetInstanceIRI
          in: query
          schema:
            type: string
        - name: labels
          in: query
          schema:
            type: boolean
        - name: distinct
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OntologyPath'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                description: THE SPARQL CONSTRUCT query that will compute the shortest path
                type: string
        '401':
          description: Unhauthorized
        '404':
          description: Ontology not uploaded
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/constructify:
    post:
      tags:
        - sparqling_Construct
      summary: Return the CONSTRUCT query based on this Query Graph.
      operationId: constructifyPost
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryGraph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                description: THE SPARQL CONSTRUCT query that will compute the shortest path
                type: object
                properties:
                  type:
                    type: string
                  message:
                    type: string
        '401':
          description: Unhauthorized
        '404':
          description: Ontology not uploaded
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{ontologyName}/queryGraph/visualize:
    post:
      tags:
        - sparqling_Visualize
      operationId: visualizePost
      summary: Convert SPARQL code to a QueryGraph
      parameters:
        - name: ontologyName
          in: path
          description: The name of the ontology
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: The version of the ontology
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: The SPARQL code to be visualized
              type: string
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGraph'
        '401':
          description: Unhauthorized
        '404':
          description: Ontology not uploaded
          content: {}
      security:
        - apiKey: []
        - jwt: []
  /triplify/start:
    post:
      tags:
        - triplify_Execution
      summary: Starts a new thread of mappings triplification with the given parameters
      operationId: post_mappings_triplification_start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MWSXOBDATriplificationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/mappings/{mapID}/triplify/listThreads:
    get:
      tags:
        - triplify_Threads
      summary: Lists the triplification threads for a given mapping specification
      operationId: get_mappings_triplification_list
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/mappings/{mapID}/triplify/listThreadProgresses:
    get:
      tags:
        - triplify_Threads
      summary: Lists the triplification threads for a given mapping specification
      operationId: get_mappings_triplification_listProgresses
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MWSXOBDATriplificationProgress'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /triplify/stopAll:
    put:
      tags:
        - triplify_Execution
      summary: Stops all running triplification threads
      operationId: put_mappings_triplification_stop_all
      responses:
        '200':
          description: OK
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /triplify/{threadID}/stop:
    put:
      tags:
        - triplify_Execution
      summary: Stops the thread identified by threadID
      operationId: put_mappings_triplification_stop
      parameters:
        - name: threadID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /triplify/{threadID}:
    delete:
      tags:
        - triplify_Execution
      summary: Stops the thread identified by threadID
      operationId: delete_mappings_triplification_thread
      parameters:
        - name: threadID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /triplify/{threadID}/status:
    get:
      tags:
        - triplify_Execution
      summary: Returns the status of a triplification thread
      operationId: get_mappings_triplification_status
      parameters:
        - name: threadID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXOBDATriplificationProgress'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /triplify/{threadID}/report:
    get:
      tags:
        - triplify_Execution
      summary: Returns the report of a triplification thread
      operationId: get_mappings_triplification_report
      parameters:
        - name: threadID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXOBDATriplificationReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /triplify/{threadID}/download:
    get:
      tags:
        - triplify_Execution
      summary: Returns the report of a triplification thread
      operationId: get_mappings_triplification_download
      parameters:
        - name: threadID
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/mapping/{mapID}/triplify/{datasource}:
    get:
      tags:
        - triplify_Start
      summary: >-
        Triplifies the OBDA mapping specification, streaming the produced
        triples to the client
      operationId: get__owlOntology_name_version_query_ID_export_directcsv
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: mapID
          in: path
          required: true
          schema:
            type: string
        - name: datasource
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/virtualEntities:
    get:
      tags:
        - virtual-entities_Persistence
      summary: Returns the virtual entities available for a given ontology
      operationId: getOwlOntologyNameVersionOntologyVirtualEntities
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/SparqlingVirtualEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - virtual-entities_Persistence
      summary: Deletes the virtual entities for a given ontology
      operationId: deleteOwlOntologyNameVersionOntologyVirtualEntities
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingVirtualEntities'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/virtualEntities/export:
    get:
      tags:
        - virtual-entities_Persistence
      summary: Returns the virtual entities available for a given ontology
      operationId: getOwlOntologyNameVersionOntologyVirtualEntitiesExport
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingVirtualEntities'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/virtualEntities/import:
    post:
      tags:
        - virtual-entities_Persistence
      summary: Upload virtual entities for a given ontology
      operationId: postOwlOntologyNameVersionOntologyVirtualEntitiesImport
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: additive
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SparqlingVirtualEntities'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingVirtualEntities'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/virtualEntity/{vname}:
    get:
      tags:
        - virtual-entities_Persistence
      summary: Get a virtual entity by name for a given ontology
      operationId: getOwlOntologyNameVersionOntologyVirtualEntity
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: vname
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingVirtualEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - virtual-entities_Persistence
      summary: DELETE a virtual entity by name for a given ontology
      operationId: deleteOwlOntologyNameVersionOntologyVirtualEntity
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: vname
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingVirtualEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/virtualEntity:
    post:
      tags:
        - virtual-entities_Persistence
      summary: Create a new virtual entity for a given ontology
      operationId: postOwlOntologyNameVersionOntologyVirtualEntity
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SparqlingVirtualEntity'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingVirtualEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - virtual-entities_Persistence
      summary: Overwrite a virtual entity for a given ontology
      operationId: putOwlOntologyNameVersionOntologyVirtualEntity
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SparqlingVirtualEntity'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SparqlingVirtualEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/virtualEntity/semantics:
    post:
      tags:
        - virtual-entities_Persistence
      summary: POST mwsx/owlOntology/{name}/version/virtualEntity/semantics
      operationId: postOwlOntologyNameVersionOntologyVirtualEntitySemantics
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SparqlingVirtualEntity'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /endpoint/{name}/virtualEntity/{veName}:
    get:
      tags:
        - virtual-entities_Persistence
      summary: Returns the virtual entity from a given endpoint by its name
      operationId: get__owlOntology_name_version_endpoint_virtualEntity_results
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: veName
          in: path
          required: true
          schema:
            type: string
        - name: unfolderCountThreshold
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/vkg/catalog:
    get:
      tags:
        - vkg_Persistence
      summary: Get the VKG Snaphot catalog for a given ontology (name, version)
      operationId: get_vkg_snapshots
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VKGSnapshot'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - vkg_Persistence
      summary: >-
        Save a new VKG Snaphot in the catalog for a given ontology (name,
        version).
      operationId: post_vkg_snapshot
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VKGSnapshot'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VKGSnapshot'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - vkg_Persistence
      summary: >-
        DELETE the entire VKG Snapshot catalog for a given ontology (name,
        version)
      operationId: delete_vkg_snapshots
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VKGSnapshot'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/vkg/catalog/{snapshotId}:
    put:
      tags:
        - vkg_Persistence
      summary: >-
        Overwrite a VKG Snapshot (given its snapshotId) in the catalog for a
        given ontology (name, version)
      operationId: put_vkg_snapshot
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: snapshotId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VKGSnapshot'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VKGSnapshot'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - vkg_Persistence
      summary: >-
        Delete a given VKG Snapshot from catalog for a given ontology (name,
        version)
      operationId: delete_vkg_snapshot
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: snapshotId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VKGSnapshot'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/vkg/catalog/export:
    get:
      tags:
        - vkg_Persistence
      summary: >-
        Get the entire VKG Snapshot catalog for a given ontology (name, version)
        as a file
      operationId: export_vkg_snapshots
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/vkg/catalog/import:
    post:
      tags:
        - vkg_Persistence
      summary: >-
        Upload the JSON file of a VKG Snapshot catalog for a given ontology
        (name, version)
      operationId: import_vkg_snapshots
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: additive
          in: query
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/vkg/node-rendering:
    get:
      tags:
        - vkg_NodeRendering
      summary: Returns the default VKG node rendering for the ontology version
      operationId: get_default_node_rendering
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomNodeRenderingMap'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - vkg_NodeRendering
      summary: Set a default VKG node rendering for the ontology version
      operationId: post_default_node_rendering
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomNodeRenderingMap'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomNodeRenderingMap'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - vkg_NodeRendering
      summary: Modifies the default VKG node rendering for the ontology version
      operationId: put_default_node_rendering
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomNodeRenderingMap'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomNodeRenderingMap'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - vkg_NodeRendering
      summary: DELETE mwsx/owlOntology/{name}/version/vkg/node-rendering
      operationId: delete_vkg_node_rendering
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraphs:
    get:
      tags:
        - knowledge-graphs_Persistence
      summary: GET mwsx/knowledgeGraphs
      operationId: get__knowledgeGraphs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KnowledgeGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - knowledge-graphs_Persistence
      summary: POST mwsx/knowledgeGraphs
      operationId: post__knowledgeGraphs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraph'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph:
    delete:
      tags:
        - knowledge-graphs_Persistence
      summary: DELETE mwsx/knowledgeGraph
      operationId: delete__knowledgeGraph
      parameters:
        - name: kg
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - knowledge-graphs_Persistence
      summary: GET mwsx/knowledgeGraph
      operationId: get__knowledgeGraph
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/info:
    get:
      tags:
        - knowledge-graphs_Persistence
      summary: GET mwsx/knowledgeGraph/info
      operationId: get__knowledgeGraph_info
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/prefixes:
    post:
      tags:
        - knowledge-graphs_General
      summary: POST mwsx/knowledgeGraph/prefixes
      operationId: post__knowledgeGraph_prefixes
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: overwrite
          in: query
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Prefixes to be added or updated
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - knowledge-graphs_General
      summary: GET mwsx/knowledgeGraph/prefixes
      operationId: get__knowledgeGraph_prefixes
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/folder:
    get:
      tags:
        - knowledge-graphs_FileSystem
      summary: GET mwsx/knowledgeGraph/folder
      operationId: get__knowledgeGraph_folder
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/status:
    get:
      tags:
        - knowledge-graphs_Status
      summary: GET mwsx/knowledgeGraph/status
      operationId: get__knowledgeGraph_status
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KGStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/status/list:
    get:
      tags:
        - knowledge-graphs_Status
      summary: GET mwsx/knowledgeGraph/status/list
      operationId: get__knowledgeGraph_status_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/file:
    put:
      tags:
        - knowledge-graphs_Persistence
      summary: PUT mwsx/knowledgeGraph/file
      operationId: patch__knowledgeGraph_file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphFile'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - knowledge-graphs_Persistence
      summary: DELETE mwsx/knowledgeGraph/file
      operationId: delete__knowledgeGraph_file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - knowledge-graphs_Persistence
      summary: GET mwsx/knowledgeGraph/file
      operationId: get__knowledgeGraph_file
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/classes:
    get:
      tags:
        - knowledge-graphs_Classes
      summary: GET mwsx/knowledgeGraph/classes
      operationId: get__knowledgeGraph_mentioned_classes
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/classes/stats:
    get:
      tags:
        - knowledge-graphs_Classes
      summary: GET mwsx/knowledgeGraph/classes/stats
      operationId: get__knowledgeGraph_mentioned_classes_stats
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassStats'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/class/instances:
    get:
      tags:
        - knowledge-graphs_Classes
      summary: GET mwsx/knowledgeGraph/class/instances
      operationId: get__knowledgeGraph_mentioned_instances_by_class
      parameters:
        - name: kgIri
          in: query
          required: true
          schema:
            type: string
        - name: classIri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstanceLabelType'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/namedGraphs:
    get:
      tags:
        - knowledge-graphs_General
      summary: GET mwsx/knowledgeGraph/namedGraphs
      operationId: get__knowledgeGraph_named_graphs
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/instances:
    get:
      tags:
        - knowledge-graphs_Instances
      summary: GET mwsx/knowledgeGraph/instances
      operationId: get__knowledgeGraph_instances
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstanceLabelType'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/union:
    put:
      tags:
        - knowledge-graphs_Union
      summary: PUT mwsx/knowledgeGraph/union
      operationId: patch__knowledgeGraph_union
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphUnion'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/union/ontology:
    put:
      tags:
        - knowledge-graphs_Union
      summary: PUT mwsx/knowledgeGraph/union/ontology
      operationId: patch__knowledgeGraph_union_ontology
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphOntologyUnion'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/union/queryKg:
    put:
      tags:
        - knowledge-graphs_Union
      summary: PUT mwsx/knowledgeGraph/union/queryKg
      operationId: patch__knowledgeGraph_union_queryKg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphDestinationQueryKg'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/catalog:
    get:
      tags:
        - knowledge-graphs_Query
      summary: GET mwsx/knowledgeGraph/query/catalog
      operationId: get__knowledgeGraph_query_catalog
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OBDACatalog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - knowledge-graphs_Query
      summary: POST mwsx/knowledgeGraph/query/catalog
      operationId: post__knowledgeGraph_query_catalog
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/catalog/export:
    get:
      tags:
        - knowledge-graphs_Query
      summary: GET mwsx/knowledgeGraph/query/catalog/export
      operationId: get__knowledgeGraph_query_catalog_export
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/catalog/{queryID}:
    get:
      tags:
        - knowledge-graphs_Query
      summary: GET mwsx/knowledgeGraph/query/catalog/{queryID}
      operationId: get__knowledgeGraph_query_catalog_queryID
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQuery'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - knowledge-graphs_Query
      summary: PUT mwsx/knowledgeGraph/query/catalog/{queryID}
      operationId: put__knowledgeGraph_query_catalog_queryID
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - knowledge-graphs_Query
      summary: DELETE mwsx/knowledgeGraph/query/catalog/{queryID}
      operationId: delete__knowledgeGraph_query_catalog_queryID
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/start:
    post:
      tags:
        - knowledge-graphs_Query
      summary: POST mwsx/knowledgeGraph/query/start
      operationId: post__knowledgeGraph_query_start
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQueryExecution'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/catalog/{queryID}/start:
    post:
      tags:
        - knowledge-graphs_Query
      summary: POST mwsx/knowledgeGraph/query/catalog/{queryID}/start
      operationId: post__knowledgeGraph_query_catalog_queryID_start
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQueryExecution'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/{queryID}/stop:
    put:
      tags:
        - knowledge-graphs_Query
      summary: PUT mwsx/knowledgeGraph/query/{queryID}/stop
      operationId: get__knowledgeGraph_query_executionID_stop
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/{queryID}/exportResults:
    get:
      tags:
        - knowledge-graphs_Query
      summary: GET mwsx/knowledgeGraph/query/{queryID}/exportResults
      operationId: get__knowledgeGraph_query_executionID_exportResults
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/{queryID}/status:
    get:
      tags:
        - knowledge-graphs_Query
      summary: GET mwsx/knowledgeGraph/query/{queryID}/status
      operationId: get__knowledgeGraph_query_executionID_status
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KGStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/{queryId}:
    delete:
      tags:
        - knowledge-graphs_Query
      summary: DELETE mwsx/knowledgeGraph/query/{queryId}
      operationId: delete__knowledgeGraph_query_executionID_thread
      parameters:
        - name: queryId
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/query/{queryID}/results:
    get:
      tags:
        - knowledge-graphs_Query
      summary: GET mwsx/knowledgeGraph/query/{queryID}/results
      operationId: get__knowledgeGraph_query_executionID_results
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/instance/page:
    get:
      tags:
        - knowledge-graphs_Instances
      summary: GET mwsx/knowledgeGraph/instance/page
      operationId: get__knowledgeGraph_instance_page
      parameters:
        - name: instanceIri
          in: query
          required: true
          schema:
            type: string
        - name: kgIri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePage'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/instance/objectType:
    get:
      tags:
        - knowledge-graphs_Instances
      summary: GET mwsx/knowledgeGraph/instance/objectType
      operationId: get__knowledgeGraph_instance_objectType
      parameters:
        - name: kgIri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
        - name: object
          in: query
          required: true
          schema:
            type: string
        - name: predicate
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: lang
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPredicatePageType'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/instance/subjectType:
    get:
      tags:
        - knowledge-graphs_Instances
      summary: GET mwsx/knowledgeGraph/instance/subjectType
      operationId: get__knowledgeGraph_instance_subjectType
      parameters:
        - name: kgIri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
        - name: subject
          in: query
          required: true
          schema:
            type: string
        - name: predicate
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: lang
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPredicatePageType'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/store/file:
    post:
      tags:
        - knowledge-graphs_FileSystem
      summary: POST mwsx/knowledgeGraph/store/file
      operationId: post__knowledgeGraph_store_file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - knowledge-graphs_FileSystem
      summary: GET mwsx/knowledgeGraph/store/file
      operationId: get__knowledgeGraph_store_file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KGStoreFileInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/store/file/{name}:
    delete:
      tags:
        - knowledge-graphs_FileSystem
      summary: DELETE mwsx/knowledgeGraph/store/file/{name}
      operationId: delete__knowledgeGraph_store_file
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - knowledge-graphs_FileSystem
      summary: GET mwsx/knowledgeGraph/store/file/{name}
      operationId: get__knowledgeGraph_store_file_name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KGStoreFileInfoEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/file:
    post:
      tags:
        - knowledge-graphs_Upload
      summary: POST mwsx/knowledgeGraph/upload/file
      operationId: post__knowledgeGraph_upload_file
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/import:
    put:
      tags:
        - knowledge-graphs_Upload
      summary: PUT mwsx/knowledgeGraph/upload/import
      operationId: put__knowledgeGraph_upload_import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphFileDestination'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/delete/file:
    delete:
      tags:
        - knowledge-graphs_Persistence
      summary: DELETE mwsx/knowledgeGraph/delete/file
      operationId: delete__knowledgeGraph_delete_file
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/delete/file/triples:
    delete:
      tags:
        - knowledge-graphs_Persistence
      summary: DELETE mwsx/knowledgeGraph/delete/file/triples
      operationId: delete__knowledgeGraph_delete_file_triples
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: namedGraph
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/remove:
    delete:
      tags:
        - knowledge-graphs_Upload
      summary: DELETE mwsx/knowledgeGraph/upload/remove
      operationId: delete__knowledgeGraph_upload_remove
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/files:
    get:
      tags:
        - knowledge-graphs_Upload
      summary: GET mwsx/knowledgeGraph/upload/files
      operationId: get__knowledgeGraph_upload_files
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KnowledgeGraphFileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/union/queryOBDA:
    put:
      tags:
        - knowledge-graphs_Union
      summary: PUT mwsx/knowledgeGraph/union/queryOBDA
      operationId: put__knowledgeGraph_union_queryOBDA
      parameters:
        - name: fileName
          in: query
          required: true
          schema:
            type: string
        - name: uploadOnly
          in: query
          required: true
          schema:
            type: boolean
        - name: endpointName
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphDestinationQueryOBDA'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/file/csv:
    post:
      tags:
        - knowledge-graphs_Upload
      summary: POST mwsx/knowledgeGraph/upload/file/csv
      operationId: post__knowledgeGraph_upload_file_csv
      parameters:
        - name: hasHeadersRow
          in: query
          required: true
          schema:
            type: boolean
        - name: csvSeparator
          in: query
          required: true
          schema:
            type: string
        - name: quoteChar
          in: query
          required: true
          schema:
            type: string
        - name: escapeChar
          in: query
          required: true
          schema:
            type: string
        - name: eolSequence
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/files/csv:
    get:
      tags:
        - knowledge-graphs_Upload
      summary: GET mwsx/knowledgeGraph/upload/files/csv
      operationId: get__knowledgeGraph_upload_file_csv
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KnowledgeGraphFileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/delete/file/csv/{fileName}:
    delete:
      tags:
        - knowledge-graphs_CSV
      summary: DELETE mwsx/knowledgeGraph/delete/file/csv/{fileName}
      operationId: delete__knowledgeGraph_upload_file_csv
      parameters:
        - name: fileName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/file/csv/{fileName}/preview:
    get:
      tags:
        - knowledge-graphs_CSV
      summary: GET mwsx/knowledgeGraph/file/csv/{fileName}/preview
      operationId: get__knowledgeGraph_upload_file_csv_preview
      parameters:
        - name: fileName
          in: path
          required: true
          schema:
            type: string
        - name: lines
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsvPreview'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/import/csv:
    put:
      tags:
        - knowledge-graphs_Upload
      summary: PUT mwsx/knowledgeGraph/upload/import/csv
      operationId: put__knowledgeGraph_upload_file_csv_import
      parameters:
        - name: synchronousMode
          in: query
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsvImportInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/import/threads:
    get:
      tags:
        - knowledge-graphs_Upload
      summary: GET mwsx/knowledgeGraph/upload/import/threads
      operationId: get__knowledgeGraph_upload_file_csv_import
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KgCsvImportReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /knowledgeGraph/upload/import/thread:
    get:
      tags:
        - knowledge-graphs_Upload
      summary: GET mwsx/knowledgeGraph/upload/import/thread
      operationId: get__knowledgeGraph_upload_file_csv_import_thread
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: threadId
          in: query
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KgCsvImportReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - knowledge-graphs_Upload
      summary: DELETE mwsx/knowledgeGraph/upload/import/thread
      operationId: delete__knowledgeGraph_upload_file_csv_import_thread
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
        - name: threadId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KgCsvImportReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyDraftInfos:
    get:
      tags:
        - ontology-designer_Persistence
      summary: Returns the list of all ontology drafts made by the user
      operationId: getOntologyDrafts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyDraftInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyDraft/{ontologyName}:
    get:
      tags:
        - ontology-designer_Persistence
      summary: Returns the ontology draft {ontologyName}
      operationId: getOntologyDraft
      parameters:
        - name: ontologyName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RDFGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - ontology-designer_Persistence
      summary: Adds a new draft to the list of all ontology drafts
      operationId: postOntologyDraft
      parameters:
        - name: ontologyName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RDFGraph'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RDFGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - ontology-designer_Persistence
      summary: >-
        Modifies the ontology draft {ontologyName} (called when using the
        ontology builder to save the draft)
      operationId: putOntologyDraft
      parameters:
        - name: ontologyName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RDFGraph'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RDFGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontology-designer_Persistence
      summary: Deletes the ontology draft {ontologyName}
      operationId: deleteOntologyDraft
      parameters:
        - name: ontologyName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RDFGraph'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyDraft/download:
    post:
      tags:
        - ontology-designer_Persistence
      summary: Download the ontology draft {ontologyName} converted in OWL2
      operationId: getOntologyDraftDownload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RDFGraph'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                description: FileInfo object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyCatalog:
    post:
      tags:
        - ontology-catalog_Persistence
      summary: Perform an action for ontology to the catalog
      description: Modifies the ontology catalog byacoording to the action provided
      operationId: post_ontology_catalog
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum:
              - add
              - delete
        - name: overwrite
          in: query
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OntologyID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - ontology-catalog_Persistence
      summary: GET mwsx/ontologyCatalog
      operationId: get_ontology_catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MWSXOntologyCatalogEntries'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - ontology-catalog_Persistence
      summary: DELETE mwsx/ontologyCatalog
      operationId: delete_ontology_catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyCatalog/query/start:
    post:
      tags:
        - ontology-catalog_Query
      summary: Starts a SPARQL query over the catalog
      operationId: post_ontology_catalog_query_start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQueryExecution'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyCatalog/query/{queryID}/stop:
    put:
      tags:
        - ontology-catalog_Query
      summary: Stops a SPARQL query over the catalog
      operationId: put_ontology_catalog_query_stop
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyCatalog/query/{queryID}/status:
    get:
      tags:
        - ontology-catalog_Query
      summary: Check the status of a SPARQL query
      description: Check the status of a SPARQL query
      operationId: getOntologyCatalogQueryStatus
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /ontologyCatalog/query/{queryID}/results:
    get:
      tags:
        - ontology-catalog_Query
      summary: Retrieve the results of a SPARQL query
      description: Retrieve the results of a SPARQL query
      operationId: get_ontology_catalog_query_results
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/avpOntologyTree:
    get:
      tags:
        - authorization-view-profiles_Logical
      summary: GET mwsx/owlOntology/{name}/version/avpOntologyTree
      operationId: get__owlOntology_name_version_avpOntologyTreet
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvpOntologyTree'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/authorizationViewProfiles:
    get:
      tags:
        - authorization-view-profiles_Persistence
      summary: GET mwsx/owlOntology/{name}/version/authorizationViewProfiles
      operationId: get_authorizationViewProfiles
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationViewProfileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - authorization-view-profiles_Persistence
      summary: POST mwsx/owlOntology/{name}/version/authorizationViewProfiles
      operationId: post_authorizationViewProfiles
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationViewProfileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationViewProfileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/authorizationViewProfile/{avpId}:
    put:
      tags:
        - authorization-view-profiles_Persistence
      summary: PUT mwsx/owlOntology/{name}/version/authorizationViewProfile/{avpId}
      operationId: put_authorizationViewProfiles
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: avpId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationViewProfileInfo'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationViewProfileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - authorization-view-profiles_Persistence
      summary: DELETE mwsx/owlOntology/{name}/version/authorizationViewProfile/{avpId}
      operationId: delete_authorizationViewProfiles
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: avpId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationViewProfileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/dashboards:
    get:
      tags:
        - dashboards_Persistence
      summary: GET mwsx/owlOntology/{name}/version/dashboards
      operationId: get__owlOntology_version_dashboards
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboards'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - dashboards_Persistence
      summary: POST mwsx/owlOntology/{name}/version/dashboards
      operationId: post__owlOntology_version_dashboards
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboards'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/dashboard/{dashboardId}/migrate:
    post:
      tags:
        - dashboards_Persistence
      summary: >-
        Migrates dashboard with ID dashboardId from version 'version' to
        'version' targetVersion for ontology named 'name'
      operationId: post__owlOntology_version_dashboard_migrate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: targetVersion
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboards'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/dashboards/migrate:
    post:
      tags:
        - dashboards_Persistence
      summary: >-
        Migrates all dashboards from version 'version' to 'version'
        targetVersion for ontology named 'name'
      operationId: post__owlOntology_version_dashboards_migrate
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: targetVersion
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboards'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/dashboard/{dashboardId}:
    put:
      tags:
        - dashboards_Persistence
      summary: PUT mwsx/owlOntology/{name}/version/dashboard/{dashboardId}
      operationId: put__owlOntology_version_dashboards
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - dashboards_Persistence
      summary: DELETE mwsx/owlOntology/{name}/version/dashboard/{dashboardId}
      operationId: delete__owlOntology_version_dashboards
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints:
    get:
      tags:
        - data-quality_Constraints
      summary: Returns the available constraints defined over the ontology / version
      operationId: get_ontologyConstraints
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyConstraints'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set:
    post:
      tags:
        - data-quality_CheckSet
      summary: Create a new data quality check set
      operationId: post_ontologyConstraints_check_start
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataQualityCheckSet'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - data-quality_CheckSet
      summary: Returns a list of the check sets available for the ontology / version
      operationId: get_ontologyConstraints_check_sets
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataQualityCheckSet'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}:
    get:
      tags:
        - data-quality_CheckSet
      summary: Returns a check set defined over the ontology / version
      operationId: get_ontologyConstraints_check_set_setId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSet'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - data-quality_CheckSet
      summary: Deletes the given check set from
      operationId: delete_ontologyConstraints_check_set_setId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSet'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - data-quality_CheckSet
      summary: Updates the definition of a specific check set
      operationId: put_ontologyConstraints_check
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataQualityCheckSet'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSet'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/start/{endpoint}:
    put:
      tags:
        - data-quality_CheckSet
      summary: Starts a new execution of the given check set over a specific endpoint
      operationId: put_ontologyConstraints_check_start
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: endpoint
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: answersBufferSize
          in: query
          required: true
          schema:
            type: string
        - name: autosave
          in: query
          required: true
          schema:
            type: string
        - name: concurrentChecksNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Mapping parameters values
              type: object
              properties:
                checkId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/stop:
    put:
      tags:
        - data-quality_CheckSet
      summary: Stops the execution of the thread executing the specific check set
      operationId: put_ontologyConstraints_check_stop
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/removeThread:
    delete:
      tags:
        - data-quality_CheckSet
      summary: Deletes the execution thread of the specified check set from the server
      operationId: delete_ontologyConstraints_check_removeThread
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/status:
    get:
      tags:
        - data-quality_CheckSet
      summary: Returns the running state of the specified check set
      operationId: get_ontologyConstraints_check_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetStatus'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/sets/running:
    get:
      tags:
        - data-quality_CheckSet
      summary: Returns the identifiers of the currently running check sets
      operationId: get_ontologyConstraints_check_running
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/sets/executionLogs:
    get:
      tags:
        - data-quality_CheckSet
      summary: Returns all the execution logs of the given check set
      operationId: get_ontologyConstraints_execution_log
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLogs'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLog:
    get:
      tags:
        - data-quality_CheckSet
      summary: >-
        Returns the execution log of the last execution of the specified check
        set
      operationId: get_ontologyConstraints_checkSetId_execution_log
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLogs'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - data-quality_CheckSet
      summary: Returns the execution log of a data quality check set
      operationId: put_ontologyConstraints_checkSetId_execution_timestamps
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLogs/timestamps:
    get:
      tags:
        - data-quality_CheckSet
      summary: >-
        Returns a list of the available timestamps for a check set of the given
        ontology/version
      operationId: get_ontologyConstraints_checkSetId_execution_timestamps
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLogs/timestamp/{timestamp}:
    get:
      tags:
        - data-quality_CheckSet
      summary: Returns the execution log of a check set run at the provided timestamp
      operationId: get_ontologyConstraints_checkSetId_execution_timestamp
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - data-quality_CheckSet
      summary: Deletes the execution log of a check set run at the provided timestamp
      operationId: delete_ontologyConstraints_checkSetId_execution_timestamp
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLog/timestamps:
    delete:
      tags:
        - data-quality_CheckSet
      summary: >-
        Deletes all the data quality check set execution logs saved on the
        server for the given ontology/version
      operationId: delete_ontologyConstraints_checkSetId_execution_timestamps
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/dump:
    get:
      tags:
        - data-quality_CheckSet
      summary: Returns the dump of a data quality check set
      operationId: get_ontologyConstraints_checkSetId_export
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetDump'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/ontologyConstraints/sets/dump:
    post:
      tags:
        - data-quality_CheckSet
      summary: >-
        Imports a data quality check set dump and returns a report of the
        performed operation
      operationId: post_ontologyConstraints_checkSetId_import
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: importMappingParameters
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataQualityCheckSetDump'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetImportReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/shacl:
    get:
      tags:
        - data-quality_SHACL
      summary: >-
        Returns the JSON constraints file of the version 'version' of the
        ontology named <code>name</code>.<br/> 
      operationId: get__owlOntology_name_version_json_constraints
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - data-quality_SHACL
      summary: >-
        Deletes the JSON constraints file of the version 'version' of the
        ontology named <code>name</code>.<br/> 
      operationId: delete__owlOntology_name_version_json_constraints
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlOntology/{name}/version/shacl/check:
    get:
      tags:
        - data-quality_SHACL
      summary: GET mwsx/owlOntology/{name}/version/shacl/check
      operationId: get__owlOntology_name_version_json_constraints_check
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /log/{env}/{mode}:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/log/{env}/{mode}
      operationId: setLogger
      parameters:
        - name: env
          in: path
          required: true
          schema:
            type: string
        - name: mode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /mastro/version:
    get:
      tags:
        - misc_Versions
      summary: Returns the version of Mastro
      operationId: get__mastro_version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /jena/version:
    get:
      tags:
        - misc_Versions
      summary: Returns the version of the Jena library used by Mastro
      operationId: get__jena_version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /owlapi/version:
    get:
      tags:
        - misc_Versions
      summary: Returns the version of the OWL API used by Mastro
      operationId: get__owlapi_version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /resources/ontologies:
    get:
      tags:
        - misc_Resources
      summary: GET mwsx/resources/ontologies
      operationId: get__resources_ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /resources/ontology/{name}/versions:
    get:
      tags:
        - misc_Resources
      summary: GET mwsx/resources/ontology/{name}/versions
      operationId: get__resources_ids_versions
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /resources/ontology/{name}/version/mappings:
    get:
      tags:
        - misc_Resources
      summary: GET mwsx/resources/ontology/{name}/version/mappings
      operationId: get__resources_ids_mappings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /resources/datasources:
    get:
      tags:
        - misc_Resources
      summary: GET mwsx/resources/datasources
      operationId: get__resources_ds_ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /resources/endpoints:
    get:
      tags:
        - misc_Resources
      summary: GET mwsx/resources/endpoints
      operationId: get__resources_ep_ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /mastro/instances:
    get:
      tags:
        - misc_Mastro
      summary: GET mwsx/mastro/instances
      operationId: get__available_instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MastroID'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /lastLoaded/ontology:
    get:
      tags:
        - misc_LastLoaded
      summary: GET mwsx/lastLoaded/ontology
      operationId: get_lastLoaded_ontology
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyOpeningEvent'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /lastLoaded/knowledgeGraph:
    get:
      tags:
        - misc_LastLoaded
      summary: GET mwsx/lastLoaded/knowledgeGraph
      operationId: get_lastLoaded_knowledgeGraph
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KGOpeningEvent'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /globalAnnotations:
    get:
      tags:
        - misc_GlobalAnnotation
      summary: GET mwsx/globalAnnotations
      operationId: get_global_annotations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /globalAnnotation:
    post:
      tags:
        - misc_GlobalAnnotation
      summary: POST mwsx/globalAnnotation
      operationId: post_global_annotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OntologyEntity'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /globalAnnotation/{entityId}:
    delete:
      tags:
        - misc_GlobalAnnotation
      summary: DELETE mwsx/globalAnnotation/{entityId}
      operationId: delete_global_annotation
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyEntity'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /server/license/info:
    get:
      tags:
        - misc_Server
      summary: Computes and returns the system storage report
      operationId: get_server_license_expiration_date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /server/storage/report:
    get:
      tags:
        - misc_Server
      summary: Computes and returns the system storage report
      operationId: get_system_storage_report
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStorageReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /server/storage/{folder}:
    delete:
      tags:
        - misc_Server
      summary: Computes and returns the system storage report
      operationId: get_empty_folder
      parameters:
        - name: folder
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemFolderDeletionReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /server/systemSnapshot:
    get:
      tags:
        - misc_Server
      summary: Computes and returns the system storage report
      operationId: get_system_snapshot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /server/systemMemory:
    get:
      tags:
        - misc_Server
      summary: Computes and returns the system storage report
      operationId: get_system_memory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /server/userlog/{username}/count:
    get:
      tags:
        - misc_Server
      summary: Returns the user log lines count
      operationId: get_userlog_count
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /server/userlog/{username}:
    get:
      tags:
        - misc_Server
      summary: Returns the user log lines count
      operationId: get_userlog_count_user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: start
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: length
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/MwsxUserLogMessage'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /geocoding/servers:
    get:
      tags:
        - misc_Geocoding
      summary: Returns the list of available Geocoding servers
      operationId: get_geocoding_servers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeocodingServers'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /geocoding/server/{serverId}:
    put:
      tags:
        - misc_Geocoding
      summary: >-
        Adds or modifies the specified Geocoding server and returns the new list
        of available servers
      operationId: put_geocoding_server
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeocodingServer'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeocodingServers'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - misc_Geocoding
      summary: Removes the specified server from the list of available servers
      operationId: delete_geocoding_server
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeocodingServers'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /logger/mastroapi:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/logger/mastroapi
      operationId: get_set_mastroapi_logger
      parameters:
        - name: mode
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /logger/service:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/logger/service
      operationId: get_set_service_logger
      parameters:
        - name: mode
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /logger:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/logger
      operationId: get_set_logger
      parameters:
        - name: className
          in: query
          required: true
          schema:
            type: string
        - name: packageName
          in: query
          required: true
          schema:
            type: string
        - name: logLevel
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /logger/class:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/logger/class
      operationId: get_set_service_class
      parameters:
        - name: className
          in: query
          required: true
          schema:
            type: string
        - name: logLevel
          in: query
          required: true
          schema:
            type: string
        - name: action
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /logger/package:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/logger/package
      operationId: get_set_service_package
      parameters:
        - name: packageName
          in: query
          required: true
          schema:
            type: string
        - name: logLevel
          in: query
          required: true
          schema:
            type: string
        - name: action
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /logger/list:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/logger/list
      operationId: get_set_service_logger_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /logger/monitor:
    get:
      tags:
        - misc_Logger
      summary: GET mwsx/logger/monitor
      operationId: get_set_monitor_logger
      parameters:
        - name: mode
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /statics/sparql/extractProjectVarNames:
    post:
      tags:
        - misc_Statics
      summary: POST mwsx/statics/sparql/extractProjectVarNames
      operationId: post_extract_query_head
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /statics/sparql/templateSize:
    post:
      tags:
        - misc_Statics
      summary: POST mwsx/statics/sparql/templateSize
      operationId: post_extract_template_size
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /statics/reporting/request:
    post:
      tags:
        - misc_Statics
      summary: POST mwsx/statics/reporting/request
      operationId: post_extract_issue_report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueReportRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /system/jdbcDrivers:
    get:
      tags:
        - misc_System
      summary: Returns the available JDBC drivers
      operationId: getJdbcDrivers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JDBCDriver'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /system/jdbcDriver/{driver}:
    get:
      tags:
        - misc_System
      summary: Returns information about a specific JDBC driver
      operationId: getJdbcDriver
      parameters:
        - name: driver
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JDBCDriver'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - misc_System
      summary: Adds information about a new JDBC driver to the system
      operationId: DELETEJdbcDrivers
      parameters:
        - name: driver
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JDBCDriver'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - misc_System
      summary: Adds information about a new JDBC driver to the system
      operationId: putJdbcDrivers
      parameters:
        - name: driver
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JDBCDriver'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JDBCDriver'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /system/jdbcDriver:
    post:
      tags:
        - misc_System
      summary: Adds information about a new JDBC driver to the system
      operationId: postJdbcDrivers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JDBCDriver'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JDBCDriver'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /queryTags:
    get:
      tags:
        - misc_QueryTags
      summary: Returns all the available query tags
      operationId: get_queryTags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - misc_QueryTags
      summary: Adds a new query tag to the set of available tags
      operationId: post_queryTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MwsxTag'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /queryTags/{tagName}:
    delete:
      tags:
        - misc_QueryTags
      summary: Deletes the given query tag from the list of available tags
      operationId: delete_queryTags_tagName
      parameters:
        - name: tagName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /statistics/accesses:
    get:
      tags:
        - misc_Statistics
      summary: Returns the access log
      operationId: get_accesses_statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - misc_Statistics
      summary: Replace the current access log with the one provided
      operationId: post_accesses_statistics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccessLog'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - misc_Statistics
      summary: Adds the provided access log to the one registered in the system
      operationId: put_accesses_statistics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccessLog'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - misc_Statistics
      summary: Replace the current access log with the one provided
      operationId: delete_accesses_statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /statistics/ontologies:
    get:
      tags:
        - misc_Statistics
      summary: Returns the ontologies statistics
      operationId: get_ontologies_statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - misc_Statistics
      summary: Replace the current ontologies statistics with the one provided
      operationId: post_ontologies_statistics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OntologyUsageLog'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - misc_Statistics
      summary: >-
        Adds the provided ontologies statistics to the one registered in the
        system
      operationId: put_ontologies_statistics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OntologyUsageLog'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - misc_Statistics
      summary: Delete the provided ontologies statistics from the system
      operationId: delete_ontologies_statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OntologyUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /statistics/{endpoint}/queries:
    get:
      tags:
        - misc_Statistics
      summary: Returns the query statistics for the given endpoint
      operationId: get_statistics_endpoint_queries
      parameters:
        - name: endpoint
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueryUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    post:
      tags:
        - misc_Statistics
      summary: >-
        Replace the current query statistics with the one provided for the given
        endpoint
      operationId: post_statistics_endpoint_queries
      parameters:
        - name: endpoint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QueryUsageLog'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueryUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - misc_Statistics
      summary: >-
        Adds the provided query statistics for the given endpoint to the one
        registered in the system
      operationId: put_statistics_endpoint_queries
      parameters:
        - name: endpoint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QueryUsageLog'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueryUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - misc_Statistics
      summary: Deletes from the system the query statistics for the given endpoint
      operationId: delete_statistics_endpoint_queries
      parameters:
        - name: endpoint
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueryUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /statistics/{endpoint}/entities:
    get:
      tags:
        - misc_Statistics
      summary: Returns the entities statistics for the given endpoint
      operationId: get_statistics_endpoint_entities
      parameters:
        - name: endpoint
          in: path
          required: true
          schema:
            type: string
        - name: timestampStart
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: timestampEnd
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityUsageLog'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/state:
    get:
      tags:
        - task-scheduler_State
      summary: Starts the task scheduler
      operationId: get__task_scheduler_state
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - task-scheduler_State
      summary: Starts the task scheduler
      operationId: put__task_scheduler_state
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/jobs:
    post:
      tags:
        - task-scheduler_Actions
      summary: >-
        Schedules a new job in the task scheduler, returns the ID of the
        scheduled job
      operationId: post__task_scheduler_jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MwsxTaskSchedulerJobData'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    get:
      tags:
        - task-scheduler_Actions
      summary: >-
        Schedules a new job in the task scheduler, returns the ID of the
        scheduled job
      operationId: get__task_scheduler_jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/jobs/available:
    get:
      tags:
        - task-scheduler_Persistence
      summary: Lists the jobs available in the scheduler folder
      operationId: get__task_scheduler_jobs_available
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MwsxTaskSchedulerJobEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/jobs/entries:
    get:
      tags:
        - task-scheduler_Persistence
      summary: Get the list of job entries in the task scheduler
      operationId: get__task_scheduler_job_entries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MwsxTaskSchedulerJobEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/jobs/entries/filter:
    post:
      tags:
        - task-scheduler_Actions
      summary: >-
        Schedules a new job in the task scheduler, returns the ID of the
        scheduled job
      operationId: post__task_scheduler_job_entries
      parameters:
        - name: mode
          in: query
          required: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            type: object
            additionalProperties:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MwsxTaskSchedulerJobEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/job/{jobId}/entry:
    get:
      tags:
        - task-scheduler_Persistence
      summary: Returns the main entry of the job ID
      operationId: get__task_scheduler_job_entry
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MwsxTaskSchedulerJobEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/job/{jobId}/execution/{execId}:
    get:
      tags:
        - task-scheduler_Execution
      summary: >-
        Returns the execution entry (identified by execId) of the job
        (identified by jobId)
      operationId: get__task_scheduler_job_entries_execution_id
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: execId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MwsxTaskSchedulerJobEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/job/{jobId}/execution/entries:
    get:
      tags:
        - task-scheduler_Execution
      summary: Returns the execution entries of the job ID
      operationId: get__task_scheduler_job_execution_entries
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MwsxTaskSchedulerJobEntry'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/job/{jobId}:
    delete:
      tags:
        - task-scheduler_Actions
      summary: Un-schedules and deletes a job in the task scheduler
      operationId: delete__task_scheduler_job_entries
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /taskScheduler/job/{jobId}/executionsIds:
    get:
      tags:
        - task-scheduler_Execution
      summary: Un-schedules and deletes a job in the task scheduler
      operationId: get__task_scheduler_job_entries_executions_ids
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /users:
    get:
      tags:
        - users-roles_User
      summary: Returns the list of available users of this MWS installation
      operationId: get__users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - users-roles_User
      summary: Adds multiple users to the system
      operationId: put__users
      parameters:
        - name: op
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersCreationReport'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /user/{username}:
    get:
      tags:
        - users-roles_User
      summary: Returns the user names <code>username</code>
      operationId: get__user_name
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - users-roles_User
      summary: Modifies the user identified by <code>username</code>
      operationId: put__user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: onlyInfo
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - users-roles_User
      summary: DELETE mwsx/user/{username}
      operationId: delete__user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /user:
    post:
      tags:
        - users-roles_User
      summary: Creates a new user
      operationId: post__user
      parameters:
        - name: secret
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /user/{username}/passwd:
    put:
      tags:
        - users-roles_User
      summary: Changes the user password for the user named <code>username</code>
      operationId: put__user_passwd
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: secret
          in: query
          required: true
          schema:
            type: string
        - name: oldSecret
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /user/{username}/passwd/reset:
    put:
      tags:
        - users-roles_User
      summary: PUT mwsx/user/{username}/passwd/reset
      operationId: put__user_passwd_reset
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /roles:
    get:
      tags:
        - users-roles_Roles
      summary: GET mwsx/roles
      operationId: get__roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /role/{rolename}:
    get:
      tags:
        - users-roles_Roles
      summary: GET mwsx/role/{rolename}
      operationId: get__role_name
      parameters:
        - name: rolename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    put:
      tags:
        - users-roles_Roles
      summary: PUT mwsx/role/{rolename}
      operationId: put__role
      parameters:
        - name: rolename
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
    delete:
      tags:
        - users-roles_Roles
      summary: DELETE mwsx/role/{rolename}
      operationId: delete__role
      parameters:
        - name: rolename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /role:
    post:
      tags:
        - users-roles_Roles
      summary: POST mwsx/role
      operationId: post__role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /role/configurations:
    get:
      tags:
        - users-roles_Roles
      summary: GET mwsx/role/configurations
      operationId: get__role_configs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionParameters'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /monolith/roles:
    get:
      tags:
        - users-roles_MonolithRole
      summary: GET mwsx/monolith/roles
      operationId: get__monolith__roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleMonolith'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /monolith/role/{rolename}:
    put:
      tags:
        - users-roles_MonolithRole
      summary: PUT mwsx/monolith/role/{rolename}
      operationId: put__monolith__role
      parameters:
        - name: rolename
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleMonolith'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleMonolith'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /users/feedback:
    get:
      tags:
        - users-roles_User
      summary: Returns the feedback provided by all the users
      operationId: get__users_feedback
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersFeedback'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /user/feedback:
    get:
      tags:
        - users-roles_User
      summary: Returns the feedback provided by a specific user
      operationId: get__user_feedback
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeedback'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /user/{username}/feedback:
    delete:
      tags:
        - users-roles_User
      summary: Returns the feedback provided by a specific user
      operationId: delete__user_feedback
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeedback'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
  /user/feedback/comment:
    post:
      tags:
        - users-roles_User
      summary: Returns the feedback provided by all the users
      operationId: post__user_feedback_comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFeedbackComment'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeedback'
        '401':
          description: Unhauthorized
      security:
        - apiKey: []
        - jwt: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    apiKey:
      type: apiKey
      in: header
      name: X-MONOLITH-SESSION-ID
      description: >
        This session ID is generated from Basic Authentication on the login
        route.
    jwt:
      description: >
        Generate your JWT when you log in. JWT configurations should be placed
        in `$MASTRO_HOME/config/mastro.jwt` file
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Permission:
      title: Permission
      type: object
      properties:
        domain:
          type: string
        action:
          type: string
        id:
          type: string
    Role:
      title: Role
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        name:
          type: string
    User:
      title: User
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        name:
          type: string
        email:
          type: string
    Label:
      title: Label
      type: object
      properties:
        lang:
          type: string
        content:
          type: string
    OntologyEntity:
      title: OntologyEntity
      type: object
      properties:
        entityLabels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        deprecated:
          type: boolean
        entityIRI:
          type: string
        entityType:
          type: string
        entityPrefixIRI:
          type: string
        entityRemainder:
          type: string
        entityID:
          type: string
    OntologyCatalog:
      title: OntologyCatalog
      type: object
      properties:
        ontologyDataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        ontologyObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        ontologyIndividuals:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        ontologyClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    IRI:
      title: IRI
      type: object
      properties:
        shortIRI:
          type: string
        extendedIRI:
          type: string
    DiagramNode:
      title: DiagramNode
      type: object
      properties:
        diagramName:
          type: string
        nodeID:
          type: string
    IndividualInfo:
      title: IndividualInfo
      type: object
      properties:
        iri:
          $ref: '#/components/schemas/IRI'
        currentEntity:
          $ref: '#/components/schemas/OntologyEntity'
        individualTypes:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        differentIndividuals:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        entityDiagrams:
          type: array
          items:
            $ref: '#/components/schemas/DiagramNode'
        sameIndividuals:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        individualDescriptions:
          type: array
          items:
            $ref: '#/components/schemas/Label'
    IndividualInfos:
      title: IndividualInfos
      type: object
      properties:
        individualInfos:
          type: array
          items:
            $ref: '#/components/schemas/IndividualInfo'
    OntologyVersion:
      title: OntologyVersion
      type: object
      properties:
        versionDescription:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        numAxioms:
          type: integer
          format: int32
        numIndividuals:
          type: integer
          format: int32
        catalog:
          $ref: '#/components/schemas/OntologyCatalog'
        graphol:
          type: boolean
        individualInfos:
          $ref: '#/components/schemas/IndividualInfos'
        numObjectProperties:
          type: integer
          format: int32
        numDataProperties:
          type: integer
          format: int32
        versionDate:
          type: integer
          format: int64
        numClasses:
          type: integer
          format: int32
        versionID:
          type: string
        ontologyID:
          type: string
        ontologyIRI:
          type: string
        gscape:
          type: boolean
        versionOwner:
          $ref: '#/components/schemas/User'
    Ontology:
      title: Ontology
      type: object
      properties:
        ontologyDate:
          type: integer
          format: int64
        ontologyVersions:
          type: array
          items:
            $ref: '#/components/schemas/OntologyVersion'
        ontologyOwner:
          $ref: '#/components/schemas/User'
        ontologyID:
          type: string
        ontologyDescription:
          type: string
    FileInfo:
      title: FileInfo
      type: object
      properties:
        fileName:
          type: string
        fileType:
          type: string
        content:
          type: string
    MwsxOntologyVersionCloserStatus:
      title: MwsxOntologyVersionCloserStatus
      type: object
      properties:
        id:
          type: string
        state:
          type: string
        timeStart:
          type: integer
          format: int64
        timeElapsed:
          type: integer
          format: int64
    MWSXOWLGraphDeductiveClosureReport:
      title: OWLGraphDeductiveClosureReport
      type: object
      properties:
        successfullyAddedAxioms:
          type: array
          items:
            type: string
        unsuccessfullyAddedAxioms:
          type: array
          items:
            type: string
        noOperationAxioms:
          type: array
          items:
            type: string
        success:
          type: boolean
        error:
          type: object
        timestampStart:
          type: integer
        timestampEnd:
          type: integer
        ontologyIri:
          type: string
        computeEmpties:
          type: boolean
        computeGeneralConceptInclusions:
          type: boolean
    MWSXMetadataSubject:
      type: object
      properties:
        iri:
          type: string
        impliedClassIri:
          type: string
    MWSXMetadataPredicate:
      type: object
      properties:
        iri:
          type: string
    MWSXMetadataObject:
      type: object
      properties:
        iri:
          type: string
        impliedClassIri:
          type: string
        value:
          type: string
        lang:
          type: string
        datatypeIri:
          type: string
    MWSXMetadataTriple:
      type: object
      properties:
        subject:
          $ref: '#/components/schemas/MWSXMetadataSubject'
        predicate:
          $ref: '#/components/schemas/MWSXMetadataPredicate'
        object:
          $ref: '#/components/schemas/MWSXMetadataObject'
    MWSXOntologyCatalogOntologyMetadataSet:
      type: object
      properties:
        metadataTriples:
          type: array
          items:
            $ref: '#/components/schemas/MWSXMetadataTriple'
    MwsxOntologyVersionLoaderStatus:
      title: MwsxOntologyVersionLoaderStatus
      type: object
      properties:
        id:
          type: string
        state:
          type: string
        timeStart:
          type: integer
          format: int64
        timeElapsed:
          type: integer
          format: int64
        currentStep:
          type: string
        progress:
          type: double
    MwsxOntologyVersionLoaderReport:
      title: MwsxOntologyVersionLoaderReport
      type: object
      properties:
        id:
          type: string
        state:
          type: string
        timeStart:
          type: integer
          format: int64
        timeEnd:
          type: integer
          format: int64
        hasError:
          type: boolean
        errorMessage:
          type: string
        missingImports:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    TreeNode:
      title: TreeNode
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/TreeNode'
        children:
          type: array
          items:
            $ref: '#/components/schemas/TreeNode'
        equivalents:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        numberOfMappings:
          type: integer
          format: int32
        entity:
          $ref: '#/components/schemas/OntologyEntity'
        empty:
          type: boolean
    HierarchyTree:
      title: HierarchyTree
      type: object
      properties:
        objectPropertyTree:
          $ref: '#/components/schemas/TreeNode'
        classTree:
          $ref: '#/components/schemas/TreeNode'
        dataPropertyTree:
          $ref: '#/components/schemas/TreeNode'
    OntologyHierarchy:
      title: OntologyHierarchy
      type: object
      properties:
        hierarchyTree:
          $ref: '#/components/schemas/HierarchyTree'
    Entities:
      title: Entities
      type: object
      properties:
        dataPropertyEntities:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        classEntities:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        annotationPropertyEntities:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertyEntities:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        namedIndividualEntities:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    Prefix:
      title: Prefix
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
    MapItem:
      title: MapItem
      type: object
      properties:
        mapValue:
          type: string
        mapKey:
          type: string
    OntologyMetrics:
      title: OntologyMetrics
      type: object
      properties:
        individualAxioms:
          type: array
          items:
            $ref: '#/components/schemas/MapItem'
        dataPropertyAxioms:
          type: array
          items:
            $ref: '#/components/schemas/MapItem'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/MapItem'
        classAxioms:
          type: array
          items:
            $ref: '#/components/schemas/MapItem'
        annotationAxioms:
          type: array
          items:
            $ref: '#/components/schemas/MapItem'
        objectPropertyAxioms:
          type: array
          items:
            $ref: '#/components/schemas/MapItem'
    OntologyInfo:
      title: OntologyInfo
      type: object
      properties:
        prefixes:
          type: array
          items:
            $ref: '#/components/schemas/Prefix'
        ontologyMetrics:
          $ref: '#/components/schemas/OntologyMetrics'
        ontologyDescriptions:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        ontologyIRI:
          type: string
        ontologyImports:
          type: array
          items:
            type: string
        ontologyMetricsNoImport:
          $ref: '#/components/schemas/OntologyMetrics'
    Participation:
      title: Participation
      type: object
      properties:
        inverse:
          type: boolean
        property:
          $ref: '#/components/schemas/OntologyEntity'
        filler:
          $ref: '#/components/schemas/OntologyEntity'
    ClassInfo:
      title: ClassInfo
      type: object
      properties:
        disjointClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        iri:
          $ref: '#/components/schemas/IRI'
        currentEntity:
          $ref: '#/components/schemas/OntologyEntity'
        equivalentClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        dataPropertiesIsDomainOf:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        disjointUnions:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/OntologyEntity'
        classDescriptions:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        classIndividuals:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertiesIsRangeOf:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertiesIsDomainOf:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        subClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertiesParticipations:
          type: array
          items:
            $ref: '#/components/schemas/Participation'
        dataPropertiesParticipations:
          type: array
          items:
            $ref: '#/components/schemas/Participation'
        entityDiagrams:
          type: array
          items:
            $ref: '#/components/schemas/DiagramNode'
        superClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    Annotation:
      type: object
      required:
        - value
        - property
      properties:
        lexicalForm:
          type: string
          deprecated: true
          description: Has been renamed to `value`, kept for back-compatibility.
        value:
          type: string
        hasIriValue:
          type: boolean
        property:
          type: string
          example: rdfs:label
        language:
          type: string
        datatype:
          type: string
        propertyIri:
          type: string
        entityIri:
          type: string
    ObjectPropertyInfo:
      title: ObjectPropertyInfo
      type: object
      properties:
        disjointObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        iri:
          $ref: '#/components/schemas/IRI'
        currentEntity:
          $ref: '#/components/schemas/OntologyEntity'
        objectPropertyInverseFunctional:
          type: boolean
        objectPropertyDescriptions:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        equivalentObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertySymmetric:
          type: boolean
        superObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertyCharacteristics:
          type: array
          items:
            type: string
        subObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertyIndividuals:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        inverseObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertyDomain:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertyReflexive:
          type: boolean
        objectPropertyRange:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        objectPropertyTransitive:
          type: boolean
        objectPropertyIrreflexive:
          type: boolean
        entityDiagrams:
          type: array
          items:
            $ref: '#/components/schemas/DiagramNode'
        objectPropertyFunctional:
          type: boolean
        objectPropertyAsymmetric:
          type: boolean
    DataPropertyInfo:
      title: DataPropertyInfo
      type: object
      properties:
        iri:
          $ref: '#/components/schemas/IRI'
        subDataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        dataPropertyFunctional:
          type: boolean
        currentEntity:
          $ref: '#/components/schemas/OntologyEntity'
        equivalentDataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        superDataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        dataPropertyDescriptions:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        dataPropertyDomain:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        dataPropertyRange:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        disjointDataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        entityDiagrams:
          type: array
          items:
            $ref: '#/components/schemas/DiagramNode'
        dataPropertyIndividuals:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    MWSXOntologyDifference:
      title: OntologyDifference
      type: object
      properties:
        ontologyIri:
          type: string
        ontologyVersionIri:
          type: string
        ontologyClassDelta:
          type: array
          items:
            type: string
        ontologyObjectPropertyDelta:
          type: array
          items:
            type: string
        ontologyDataPropertyDelta:
          type: array
          items:
            type: string
        ontologyAnnotationPropertyDelta:
          type: array
          items:
            type: string
        ontologyIndividualDelta:
          type: array
          items:
            type: string
        otherOntologyIri:
          type: string
        otherOntologyVersionIri:
          type: string
        otherOntologyClassDelta:
          type: array
          items:
            type: string
        otherOntologyObjectPropertyDelta:
          type: array
          items:
            type: string
        otherOntologyDataPropertyDelta:
          type: array
          items:
            type: string
        otherOntologyAnnotationPropertyDelta:
          type: array
          items:
            type: string
        otherOntologyIndividualDelta:
          type: array
          items:
            type: string
    VarOrConstant:
      type: object
      properties:
        type:
          type: string
          enum:
            - var
            - constant
            - iri
        value:
          type: string
        constantType:
          type: string
          enum:
            - xsd:string
            - xsd:decimal
            - xsd:dateTime
    Function:
      type: object
      properties:
        name:
          type: string
          enum:
            - ADD
            - SUBCTRACT
            - MULTIPLY
            - DIVIDE
            - SUBSTR
            - UCASE
            - LCASE
            - CONTAINS
            - CONCAT
            - ROUND
            - CEIL
            - FLOOR
            - YEAR
            - MONTH
            - DAY
            - HOURS
            - MINUTES
            - SECONDS
            - STRLEN
            - STRSTARTS
            - STRENDS
            - STRBEFORE
            - STRAFTER
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/VarOrConstant'
    GroupByElement:
      type: object
      properties:
        distinct:
          type: boolean
        aggregateFunction:
          type: string
          enum:
            - count
            - sum
            - min
            - max
            - average
    FilterExpression:
      type: object
      properties:
        operator:
          type: string
          enum:
            - '='
            - '!='
            - <
            - '>'
            - <=
            - '>='
            - IN
            - NOT IN
            - REGEX
            - ISBLANK
            - NOT ISBLANK
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/VarOrConstant'
    Filter:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/FilterExpression'
    HeadElement:
      type: object
      properties:
        id:
          type: string
        graphElementId:
          type: string
        var:
          type: string
        alias:
          type: string
        ordering:
          description: 1 is ascending -1 descending 0 not defined
          type: integer
        function:
          $ref: '#/components/schemas/Function'
        groupBy:
          $ref: '#/components/schemas/GroupByElement'
        having:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
    SparqlingEntity:
      type: object
      required:
        - type
        - iri
        - prefixedIri
      properties:
        type:
          type: string
          enum:
            - class
            - objectProperty
            - inverseObjectProperty
            - dataProperty
            - annotation
        iri:
          type: string
        prefixedIri:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
    GraphElement:
      type: object
      properties:
        id:
          type: string
          description: This id corrensopond to the variable when entity type is a class.
        variables:
          type: array
          description: >-
            This element could refer to one variable (if it's a class) or to two
            variables (if it's a property)
          items:
            type: string
        entities:
          type: array
          description: >-
            It could have more than one entity only when entity type is a class
            (could be derived after clicking on two borther classes)
          items:
            $ref: '#/components/schemas/SparqlingEntity'
        children:
          type: array
          items:
            $ref: '#/components/schemas/GraphElement'
    Optional:
      type: object
      properties:
        id:
          type: integer
        graphIds:
          description: Path of ids that describe optional.
          type: array
          items:
            type: string
    QueryGraph:
      required:
        - graph
        - head
        - sparql
      type: object
      properties:
        distinct:
          type: boolean
        count_star:
          type: boolean
          default: false
        head:
          type: array
          items:
            $ref: '#/components/schemas/HeadElement'
        graph:
          $ref: '#/components/schemas/GraphElement'
        activeGraphElementId:
          type: string
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        optionals:
          type: array
          items:
            $ref: '#/components/schemas/Optional'
        limit:
          type: integer
        offset:
          type: integer
        sparql:
          type: string
    ChartConfiguration:
      title: ChartConfiguration
      type: object
      properties:
        yVariables:
          type: array
          items:
            type: string
        series:
          type: string
        xVariable:
          type: string
        chartType:
          type: string
        cutoff:
          type: integer
          format: int32
    MwsxTag:
      title: MwsxTag
      type: object
      properties:
        color:
          type: string
        name:
          type: string
        description:
          type: string
    MWSXVirtualEntityQueryInfos:
      title: VirtualEntityQueryInfos
      type: object
      properties:
        virtualEntityname:
          type: string
        idSelection:
          type: string
        fieldFilters:
          type: object
          additionalProperties:
            type: string
    SPARQLQuery:
      title: SPARQLQuery
      type: object
      properties:
        selectedMappingIds:
          type: array
          items:
            type: string
        chartConfiguration:
          $ref: '#/components/schemas/ChartConfiguration'
        languages:
          type: string
        mappingParameters:
          type: object
          additionalProperties:
            type: string
        semantics:
          type: string
        constructCode:
          type: string
        queryTags:
          type: array
          items:
            $ref: '#/components/schemas/MwsxTag'
        queryDescription:
          type: string
        queryID:
          type: string
        queryCode:
          type: string
        construct:
          type: boolean
        constructResultsRDFSyntax:
          type: string
        virtualEntityQueryInfos:
          $ref: '#/components/schemas/MWSXVirtualEntityQueryInfos'
        creator:
          type: string
        entryCreation:
          type: integer
          format: int64
        entryLastModification:
          type: integer
          format: int64
        public:
          type: boolean
        publicationRequestDate:
          type: integer
          format: int64
        publicationResponseDate:
          type: integer
          format: int64
    SparqlingSPARQLQuery:
      title: SparqlingSPARQLQuery
      type: object
      properties:
        queryGraph:
          $ref: '#/components/schemas/QueryGraph'
        sparqlQuery:
          $ref: '#/components/schemas/SPARQLQuery'
        user:
          type: string
    PublicationRequest:
      title: PublicationRequest
      type: object
      properties:
        ontologyName:
          type: string
        ontologyVersion:
          type: string
        sparqlingSparqlQuery:
          $ref: '#/components/schemas/SparqlingSPARQLQuery'
    PublicationRequests:
      title: PublicationRequests
      type: object
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/PublicationRequest'
    Mapping:
      title: Mapping
      type: object
      properties:
        mappingID:
          type: string
        mappingVersion:
          type: string
        fileName:
          type: string
        mappingDescription:
          type: string
        mappingDate:
          type: integer
          format: int64
        numAssertions:
          type: integer
          format: int32
        numViews:
          type: integer
          format: int32
        numInclusionDependencies:
          type: integer
          format: int32
        prefixes:
          type: array
          items:
            $ref: '#/components/schemas/Prefix'
        numDenials:
          type: integer
          format: int32
        numKeyDependencies:
          type: integer
          format: int32
        fileType:
          type: string
        mappingOwner:
          $ref: '#/components/schemas/User'
    Mappings:
      title: Mappings
      type: object
      properties:
        mappingList:
          type: array
          items:
            $ref: '#/components/schemas/Mapping'
    DatabaseConnection:
      title: DatabaseConnection
      type: object
      properties:
        name:
          type: string
        jdbcURL:
          type: string
        dbUser:
          type: string
        dbDriver:
          type: string
        dbPassword:
          type: string
    MappingInfo:
      title: MappingInfo
      type: object
      properties:
        mapping:
          $ref: '#/components/schemas/Mapping'
        mappingTemplates:
          type: array
          items:
            type: string
        mappingDBConnections:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseConnection'
    MappingsCheckResult:
      title: MappingsCheckResult
      type: object
      properties:
        messagesByMappingId:
          type: object
        mappingInfo:
          $ref: '#/components/schemas/MappingInfo'
        success:
          type: boolean
        deprecations:
          type: array
          items:
            type: string
    MappingCount:
      title: MappingCount
      type: object
      properties:
        numberOfMappings:
          type: integer
          format: int32
        entity:
          $ref: '#/components/schemas/OntologyEntity'
    MappingEntityCount:
      title: MappingEntityCount
      type: object
      properties:
        count:
          type: array
          items:
            $ref: '#/components/schemas/MappingCount'
        countAnnotations:
          type: integer
          format: int32
    MWSXTemplateRefactoring:
      title: TemplateRefactoring
      type: object
      properties:
        oldTemplate:
          type: string
        newTemplate:
          type: string
    MappingTemplate:
      title: MappingTemplate
      type: object
      properties:
        template:
          type: string
        valueTemplate:
          type: boolean
        terms:
          type: array
          items:
            type: string
        iriTemplate:
          type: boolean
    ExtensionalAnnotationMapping:
      title: ExtensionalAnnotationMapping
      type: object
      properties:
        template:
          $ref: '#/components/schemas/MappingTemplate'
        annotationProperty:
          $ref: '#/components/schemas/OntologyEntity'
        lang:
          type: string
        subjectTemplate:
          type: string
    SQLView:
      title: SQLView
      type: object
      properties:
        sqlViewHead:
          type: array
          items:
            type: string
        sqlViewID:
          type: string
        sqlViewDescription:
          type: string
        quarantineReasons:
          type: array
          items:
            type: string
        quarantined:
          type: boolean
        sqlViewCode:
          type: string
    MappingAtom:
      title: MappingAtom
      type: object
      properties:
        view:
          $ref: '#/components/schemas/SQLView'
        terms:
          type: array
          items:
            type: string
        name:
          type: string
    MappingBody:
      title: MappingBody
      type: object
      properties:
        bip:
          type: array
          items:
            $ref: '#/components/schemas/MappingAtom'
        viewAtoms:
          type: array
          items:
            $ref: '#/components/schemas/MappingAtom'
    MappingAssertion:
      title: MappingAssertion
      type: object
      properties:
        template:
          $ref: '#/components/schemas/MappingTemplate'
        iri:
          $ref: '#/components/schemas/IRI'
        currentEntity:
          $ref: '#/components/schemas/OntologyEntity'
        annotationMappings:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionalAnnotationMapping'
        mappingBody:
          $ref: '#/components/schemas/MappingBody'
        mappingDescription:
          type: string
        rangeTemplate:
          $ref: '#/components/schemas/MappingTemplate'
        quarantineReasons:
          type: array
          items:
            type: string
        userQuery:
          type: string
        id:
          type: string
        quarantined:
          type: boolean
        extensionallyComplete:
          type: boolean
        rangeLanguageTag:
          type: string
    SQLViews:
      title: SQLViews
      type: object
      properties:
        sqlViews:
          type: array
          items:
            $ref: '#/components/schemas/SQLView'
    MWSXTermDisplacement:
      title: TermDisplacement
      type: object
      properties:
        newPosition:
          type: integer
          format: int32
        oldPosition:
          type: integer
          format: int32
    MWSXMappingViewAtomRefactoring:
      title: MappingViewAtomRefactoring
      type: object
      properties:
        oldSignature:
          type: array
          items:
            type: string
        viewName:
          type: string
        newSqlBody:
          type: string
        keptTerms:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXTermDisplacement'
        addedTerms:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXTermDisplacement'
        newSignature:
          type: array
          items:
            type: string
        removedTerms:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXTermDisplacement'
        newDescription:
          type: string
    MWSXMappingViewAtomRefactoringList:
      title: MappingViewAtomRefactoringList
      type: object
      properties:
        mappingIds:
          type: array
          items:
            type: string
        refactoring:
          $ref: '#/components/schemas/MWSXMappingViewAtomRefactoring'
        keyIds:
          type: array
          items:
            type: string
        denialIds:
          type: array
          items:
            type: string
        inclusionIds:
          type: array
          items:
            type: string
    MWSXViewRefactoring:
      title: ViewRefactoring
      type: object
      properties:
        viewName:
          type: string
        newSqlBody:
          type: string
        newDescription:
          type: string
    MWSXViewRefactoringSafenessOutcome:
      title: ViewRefactoringSafenessOutcome
      type: object
      properties:
        safenessDetails:
          type: array
          items:
            type: string
        safe:
          type: boolean
    MWSXViewRefactoringAnalysis:
      title: ViewRefactoringAnalysis
      type: object
      properties:
        refactoring:
          $ref: '#/components/schemas/MWSXMappingViewAtomRefactoring'
        invalidatedInclusionDependency:
          type: array
          items:
            type: string
        safenessAnalisys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXViewRefactoringSafenessOutcome'
        unsafeDenialConstraints:
          type: array
          items:
            type: string
        invalidatedKeyDependency:
          type: array
          items:
            type: string
    InclusionView:
      title: InclusionView
      type: object
      properties:
        termList:
          type: array
          items:
            type: string
        sqlViewID:
          type: string
    InclusionPair:
      title: InclusionPair
      type: object
      properties:
        leftHandTerm:
          type: string
        rightHandTerm:
          type: string
    InclusionDependency:
      title: InclusionDependency
      type: object
      properties:
        includedView:
          $ref: '#/components/schemas/InclusionView'
        description:
          type: string
        includingView:
          $ref: '#/components/schemas/InclusionView'
        inclusionMap:
          type: array
          items:
            $ref: '#/components/schemas/InclusionPair'
        quarantineReasons:
          type: array
          items:
            type: string
        id:
          type: string
        quarantined:
          type: boolean
    DenialConstraint:
      title: DenialConstraint
      type: object
      properties:
        description:
          type: string
        constraint:
          $ref: '#/components/schemas/MappingBody'
        quarantineReasons:
          type: array
          items:
            type: string
        id:
          type: string
        quarantined:
          type: boolean
        userQuery:
          type: string
    KeyDependency:
      title: KeyDependency
      type: object
      properties:
        keyHead:
          type: array
          items:
            type: string
        sqlViewID:
          type: string
        description:
          type: string
        quarantineReasons:
          type: array
          items:
            type: string
        id:
          type: string
        quarantined:
          type: boolean
    MappingDependencies:
      title: MappingDependencies
      type: object
      properties:
        inclusionDependencies:
          type: array
          items:
            $ref: '#/components/schemas/InclusionDependency'
        denials:
          type: array
          items:
            $ref: '#/components/schemas/DenialConstraint'
        keyDependencies:
          type: array
          items:
            $ref: '#/components/schemas/KeyDependency'
    ViewMappings:
      title: ViewMappings
      type: object
      properties:
        sqlView:
          $ref: '#/components/schemas/SQLView'
        mappingAssertions:
          type: array
          items:
            $ref: '#/components/schemas/MappingAssertion'
        mappingDependencies:
          $ref: '#/components/schemas/MappingDependencies'
    IntensionalAnnotationMappingAssertion:
      title: IntensionalAnnotationMappingAssertion
      type: object
      properties:
        annotationSubjectIRI:
          type: string
        annotationValueContent:
          type: string
        mappingBody:
          $ref: '#/components/schemas/MappingBody'
        mappingDescription:
          type: string
        annotationProperty:
          type: string
        userQuery:
          type: string
        id:
          type: string
        annotationValueLang:
          type: string
    MWSXAnnotationProcessorConfig:
      title: AnnotationProcessorConfig
      type: object
      properties:
        ontologyVersion:
          type: string
        datasource:
          type: string
        format:
          type: string
        annotations:
          type: array
          items:
            type: string
        ontologyIri:
          type: string
    MWSXMappingParameter:
      title: MappingParameter
      type: object
      properties:
        paramHint:
          type: string
        paramName:
          type: string
        paramDefaultValue:
          type: string
    MWSXMappingParameters:
      title: MappingParameters
      type: object
      properties:
        mappingParameters:
          type: array
          items:
            $ref: '#/components/schemas/MWSXMappingParameter'
    SQLQuery:
      title: SQLQuery
      type: object
      properties:
        queryCode:
          type: string
        paramValues:
          type: object
          additionalProperties:
            type: string
        dbName:
          type: string
    MappingTemplatePrompt:
      title: MappingTemplatePrompt
      type: object
      properties:
        template:
          $ref: '#/components/schemas/MappingTemplate'
        reason:
          type: string
          enum:
            - SUB_CLASS_REASON
            - SUPER_CLASS_REASON
            - OBJECT_PROPERTY_DOMAIN_REASON
            - SUB_OBJECT_PROPERTY_DOMAIN_REASON
            - SUPER_OBJECT_PROPERTY_DOMAIN_REASON
            - OBJECT_PROPERTY_RANGE_REASON
            - SUB_OBJECT_PROPERTY_RANGE_REASON
            - SUPER_OBJECT_PROPERTY_RANGE_REASON
            - DATA_PROPERTY_DOMAIN_REASON
            - SUB_DATA_PROPERTY_DOMAIN_REASON
            - SUPER_DATA_PROPERTY_DOMAIN_REASON
            - OBJECT_PROPERTY_DOMAIN_PARTICIPATION_REASON
            - OBJECT_PROPERTY_RANGE_PARTICIPATION_REASON
            - DATA_PROPERTY_DOMAIN_PARTICIPATION_REASON
        sourceEntity:
          $ref: '#/components/schemas/OntologyEntity'
    DataLineageDescription:
      title: DataLineageDescription
      type: object
      properties:
        mappingAssertionsIndex:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MappingAssertion'
        mappingViews:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        entityMapping:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        viewsIndex:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SQLView'
        projection:
          type: string
        entity:
          $ref: '#/components/schemas/OntologyEntity'
        entitiesIndex:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OntologyEntity'
        viewTables:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        subEntities:
          type: object
          additionalProperties:
            type: string
    DataLineagePropertyDescription:
      title: DataLineagePropertyDescription
      type: object
      properties:
        propertyDomain:
          $ref: '#/components/schemas/DataLineageDescription'
        propertyRange:
          $ref: '#/components/schemas/DataLineageDescription'
        property:
          $ref: '#/components/schemas/DataLineageDescription'
    MWSXDataSourceInfoEntry:
      title: DataSourceInfoEntry
      type: object
      properties:
        jdbcDriver:
          type: string
        jdbcUrl:
          type: string
        description:
          type: string
        jdbcPassword:
          type: string
        id:
          type: string
        dataSourceUsername:
          type: string
        metadataPresent:
          type: boolean
        jdbcUsername:
          type: string
    MWSXDataSourceColumnReference:
      title: DataSourceColumnReference
      type: object
      properties:
        tableName:
          type: string
        columnName:
          type: string
    MWSXDataSourceForeignKeyMetadata:
      title: DataSourceForeignKeyMetadata
      type: object
      properties:
        references:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXDataSourceColumnReference'
    MWSXDataSourceTableColumnMetadata:
      title: DataSourceTableColumnMetadata
      type: object
      properties:
        size:
          type: integer
          format: int32
        nullable:
          type: string
        generated:
          type: string
        dataTypeName:
          type: string
        decimals:
          type: integer
          format: int32
        name:
          type: string
        dataTypeId:
          type: integer
          format: int32
        ordinalPosition:
          type: integer
          format: int32
    MWSXDataSourceKeyMetadata:
      title: DataSourceKeyMetadata
      type: object
      properties:
        columnNames:
          type: array
          items:
            type: string
        name:
          type: string
        columnPosition:
          type: array
          items:
            type: integer
        tableName:
          type: string
    MWSXDataSourceTableMetadata:
      title: DataSourceTableMetadata
      type: object
      properties:
        catalogName:
          type: string
        foreignKeys:
          type: array
          items:
            $ref: '#/components/schemas/MWSXDataSourceForeignKeyMetadata'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/MWSXDataSourceTableColumnMetadata'
        keys:
          $ref: '#/components/schemas/MWSXDataSourceKeyMetadata'
        name:
          type: string
        schemaName:
          type: string
    MWSXDataSourceSchemaMetadata:
      title: DataSourceSchemaMetadata
      type: object
      properties:
        tables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXDataSourceTableMetadata'
        views:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXDataSourceTableMetadata'
    MWSXDataSourceMetadata:
      title: DataSourceMetadata
      type: object
      properties:
        catalogName:
          type: string
        schemas:
          type: array
          items:
            type: string
        schemaMetadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXDataSourceSchemaMetadata'
        DEFAULT_SCHEMA_NAME:
          type: string
        dataSourceName:
          type: string
        info:
          $ref: '#/components/schemas/MWSXDataSourceInfoEntry'
    SourceTableInfo:
      title: SourceTableInfo
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
        name:
          type: string
    SourceTables:
      title: SourceTables
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/SourceTableInfo'
    TableContentPreview:
      title: TableContentPreview
      type: object
      properties:
        colNames:
          type: array
          items:
            type: string
        content:
          type: array
          items:
            type: array
            items:
              type: string
    OntologyID:
      title: OntologyID
      type: object
      properties:
        ontologyVersion:
          type: string
        ontologyName:
          type: string
    MastroID:
      title: MastroID
      type: object
      properties:
        mappingID:
          type: string
        datasourceID:
          type: string
        avpID:
          type: string
        ontologyID:
          $ref: '#/components/schemas/OntologyID'
    EmptyUnfoldingEntities:
      title: EmptyUnfoldingEntities
      type: object
      properties:
        emptyUnfoldingDataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        emptyUnfoldingObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        emptyUnfoldingClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    Endpoint:
      title: Endpoint
      type: object
      properties:
        restartNeeded:
          type: boolean
        name:
          type: string
        description:
          type: string
        user:
          type: string
        mastroID:
          $ref: '#/components/schemas/MastroID'
        autoStart:
          type: boolean
        emptyUnfoldingEntities:
          $ref: '#/components/schemas/EmptyUnfoldingEntities'
    Endpoints:
      title: Endpoints
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
    MastroConfigurationParam:
      title: MastroConfigurationParam
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    MastroProperties:
      title: MastroProperties
      type: object
      properties:
        mastroProperties:
          type: array
          items:
            $ref: '#/components/schemas/MastroConfigurationParam'
    OBDAStatus:
      title: OBDAStatus
      type: object
      properties:
        id:
          $ref: '#/components/schemas/MastroID'
        status:
          type: string
          enum:
            - LOADING
            - RUNNING
            - UNAVAILABLE
            - ERROR
        lastError:
          type: string
    EndpointStatus:
      title: EndpointStatus
      type: object
      properties:
        restartNeeded:
          type: boolean
        config:
          $ref: '#/components/schemas/MastroProperties'
        status:
          $ref: '#/components/schemas/OBDAStatus'
    EmptyEntities:
      title: EmptyEntities
      type: object
      properties:
        emptyObjectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        emptyDataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        emptyClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    OBDARunQueryInstance:
      title: OBDARunQueryInstance
      type: object
      properties:
        executionId:
          type: string
        count:
          type: boolean
        computedSemantics:
          type: string
        sparql:
          $ref: '#/components/schemas/SPARQLQuery'
        deleted:
          type: boolean
    MWSXCoreQueryInfo:
      title: CoreQueryInfo
      type: object
      properties:
        coreQueryId:
          type: string
        sparqlCode:
          type: string
    MWSXFullSparqlQueryReport:
      title: FullSparqlQueryReport
      type: object
      properties:
        coreQueryInfos:
          type: array
          items:
            $ref: '#/components/schemas/MWSXCoreQueryInfo'
        sqlCode:
          type: string
        id:
          type: string
    OntologyRewritings:
      title: OntologyRewritings
      type: object
      properties:
        ontologyRewritings:
          type: array
          items:
            type: string
    ViewRewritings:
      title: ViewRewritings
      type: object
      properties:
        mappingRewritings:
          type: array
          items:
            type: string
    SqlRewriting:
      title: SqlRewriting
      type: object
      properties:
        query:
          type: string
        numResults:
          type: integer
          format: int32
        time:
          type: integer
          format: int32
    SqlRewritings:
      title: SqlRewritings
      type: object
      properties:
        viewRewritings:
          type: array
          items:
            $ref: '#/components/schemas/SqlRewriting'
    SPARQLResult:
      title: SPARQLResult
      type: object
      properties:
        shortIRI:
          type: string
        type:
          type: string
          enum:
            - INDIVIDUAL
            - IRI
            - VALUE
        lang:
          type: string
        value:
          type: string
        isBlankNode:
          type: boolean
    SPARQLResults:
      title: SPARQLResults
      type: object
      properties:
        headTerms:
          type: array
          items:
            type: string
        headTypes:
          type: object
        construct:
          type: boolean
        results:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/SPARQLResult'
    SPARQLStatus:
      title: SPARQLStatus
      type: object
      properties:
        executionTime:
          type: integer
          format: int32
        errorMessages:
          type: array
          items:
            type: string
        percentage:
          type: integer
          format: int32
        numLowLevelQueries:
          type: integer
          format: int32
        numResults:
          type: integer
          format: int32
        numOntologyRewritings:
          type: integer
          format: int32
        numOptimizedQueries:
          type: integer
          format: int32
        hasError:
          type: boolean
        numHighLevelQueries:
          type: integer
          format: int32
        status:
          type: string
        queryCode:
          type: string
        constructQueryCode:
          type: string
        evaluationStepTimes:
          type: object
          additionalProperties:
            type: string
    QueryRecordInfo:
      title: QueryRecordInfo
      type: object
      properties:
        ontologyRewritingEnabled:
          type: integer
          format: int32
        boolean:
          type: integer
          format: int32
        code:
          type: string
        catalogId:
          type: string
        sQLEvaluationDisabled:
          type: integer
          format: int32
        customParams:
          type: object
          additionalProperties:
            type: string
        description:
          type: string
        id:
          type: string
        qid:
          type: integer
          format: int32
        originalConstructCode:
          type: string
        agent:
          type: string
        user:
          type: string
        unfolderThresholdReached:
          type: boolean
    MWSXExportInfo:
      title: ExportInfo
      type: object
      properties:
        queryCatalogName:
          type: string
        customParams:
          type: object
          additionalProperties:
            type: string
        reasoning:
          type: boolean
        sqlCode:
          type: string
        qidsys:
          type: string
        semantics:
          type: string
        jsonExportAdapterInfo:
          type: string
        userName:
          type: string
        exportFilePath:
          type: string
        queryHeadVarTypes:
          type: object
        endpoinName:
          type: string
        answersNumber:
          type: integer
          format: int32
        size:
          type: integer
          format: int64
        answersBufferSize:
          type: integer
          format: int32
        sparqlCode:
          type: string
        sparqlConstructCode:
          type: string
        executionTimestamp:
          type: integer
          format: int64
        elapsedTime:
          type: integer
          format: int64
    MWSXExportStats:
      title: ExportStats
      type: object
      properties:
        resultsNumber:
          type: integer
          format: int32
        exportTime:
          type: integer
          format: int64
    CsvPreview:
      title: CsvPreview
      type: object
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: string
        columns:
          type: array
          items:
            type: string
    ConstructTriple:
      title: ConstructTriple
      type: object
      properties:
        predicate:
          type: string
        subject:
          type: string
        object:
          type: string
    ConstructImage:
      title: ConstructImage
      type: object
      properties:
        triples:
          type: array
          items:
            $ref: '#/components/schemas/ConstructTriple'
    TypesEnum:
      description: >-
        Contiene tutti i tipi di nodi/archi orginirari dal Graphol per evitare
        di duplicare gli enumeratori. Nella rappresentazione Floaty/vkg vengono
        usati questi valori.

        NODI class data-property class-instance (vkg) individual (floaty) union
        disjoint-union iri (floaty iri range di annotazioni che non sono entità)

        ARCHI object-property annotation-property instance-of input inclusion
        equivalence attribute-edge union disjoint-union complete-union
        complete-disjoint-union
      type: string
      enum:
        - class
        - object-property
        - data-property
        - annotation-property
        - individual
        - class-instance
        - domain-restriction
        - range-restriction
        - union
        - complete-union
        - disjoint-union
        - complete-disjoint-union
        - complement
        - intersection
        - enumeration
        - has-key
        - role-inverse
        - role-chain
        - datatype-restriction
        - value-domain
        - property-assertion
        - literal
        - facet
        - neutral
        - value
        - inclusion
        - equivalence
        - instance-of
        - input
        - same
        - different
        - membership
        - attribute-edge
        - iri
    Element:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        originalId:
          type: string
          description: >-
            In case of replicated elements, this is the ID of the original
            element replicated in multiple occurrences, all of them with
            different IDs
        diagramId:
          type: integer
        displayedName:
          type: string
        iri:
          type: string
        type:
          $ref: '#/components/schemas/TypesEnum'
        ai_generated:
          required:
            - chunkId
          type: object
          properties:
            chunkId:
              type: string
            isNew:
              type: boolean
    Position:
      type: object
      required:
        - x
        - 'y'
      properties:
        x:
          type: number
          format: float
        'y':
          type: number
          format: float
    Node:
      type: object
      allOf:
        - $ref: '#/components/schemas/Element'
        - type: object
          properties:
            position:
              $ref: '#/components/schemas/Position'
            labelPosition:
              $ref: '#/components/schemas/Position'
            geoPosition:
              $ref: '#/components/schemas/Position'
    Edge:
      type: object
      allOf:
        - $ref: '#/components/schemas/Element'
        - type: object
          required:
            - sourceId
            - targetId
          properties:
            sourceId:
              type: string
            targetId:
              type: string
            breakpoints:
              type: array
              items:
                $ref: '#/components/schemas/Position'
            domainTyped:
              type: boolean
              default: true
            rangeTyped:
              type: boolean
              default: true
            domainMandatory:
              type: boolean
              default: false
            rangeMandatory:
              type: boolean
              default: false
    Viewport:
      type: object
      required:
        - pan
        - zoom
      properties:
        pan:
          $ref: '#/components/schemas/Position'
        zoom:
          type: number
          format: float
    Diagram:
      type: object
      required:
        - id
        - name
        - elements
      properties:
        id:
          type: integer
        name:
          type: string
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        lastViewportState:
          $ref: '#/components/schemas/Viewport'
    GrapholscapeAnnotation:
      title: GrapholscapeAnnotation
      type: object
      required:
        - value
        - property
      properties:
        lexicalForm:
          type: string
          deprecated: true
          description: Has been renamed to `value`, kept for back-compatibility.
        value:
          type: string
        hasIriValue:
          type: boolean
        property:
          type: string
          example: rdfs:label
        language:
          type: string
        datatype:
          type: string
    FunctionPropertiesEnum:
      type: string
      enum:
        - functional
        - inverseFunctional
        - transitive
        - symmetric
        - asymmetric
        - reflexive
        - irreflexive
    GrapholscapeEntity:
      type: object
      required:
        - fullIri
      properties:
        fullIri:
          type: string
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/GrapholscapeAnnotation'
        datatype:
          type: string
        isDataPropertyFunctional:
          type: boolean
        functionProperties:
          type: array
          items:
            $ref: '#/components/schemas/FunctionPropertiesEnum'
    DataPropertyValue:
      type: object
      required:
        - value
        - iri
      properties:
        value:
          type: string
        iri:
          type: string
        language:
          type: string
        datatype:
          type: string
        renderingProperties:
          type: array
          items:
            type: string
    ClassInstanceEntity:
      type: object
      allOf:
        - $ref: '#/components/schemas/GrapholscapeEntity'
        - type: object
          properties:
            parentClasses:
              type: array
              items:
                type: string
            dataProperties:
              type: array
              items:
                $ref: '#/components/schemas/DataPropertyValue'
            shortIri:
              type: string
    Namespace:
      type: object
      required:
        - value
        - prefixes
      properties:
        value:
          type: string
        prefixes:
          type: array
          items:
            type: string
    Theme:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        colours:
          type: object
    Hierarchy:
      type: object
      required:
        - id
        - type
        - inputs
        - superclasses
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/TypesEnum'
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/GrapholscapeEntity'
        superclasses:
          type: array
          items:
            required:
              - classEntity
              - complete
            properties:
              classEntity:
                $ref: '#/components/schemas/GrapholscapeEntity'
              complete:
                type: boolean
    ActionInvolvedElements:
      description: >-
        Other elements involved in an action. Only for Remove actions. The
        remove action on an Entity might involve other elements. i.e. object
        properties on removed classes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        Hierarchies:
          type: array
          items:
            $ref: '#/components/schemas/Hierarchy'
    Action:
      description: >-
        Actions describes what user has done on a single element or element's
        metadata. The user can add, edit or remove something. The "something" is
        described by the operation involved in the action, it can be an
        operation over an entity, a diagram, a hierarchy and so on.

        Reverting an action means reverting the operation that has been done and
        it depends on the type of the action. - Add => Remove - Remove => Add -
        Edit => restore the previous state of the subject of the operation made
      type: object
      required:
        - operationType
        - subject
        - user
        - timestamp
      properties:
        operationType:
          type: string
          enum:
            - add
            - edit
            - remove
        subject:
          type: object
        previousState:
          type: object
        involvedElements:
          $ref: '#/components/schemas/ActionInvolvedElements'
        subactions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        user:
          type: object
          required:
            - name
          properties:
            name:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
        timestamp:
          type: number
    SHACLShape:
      type: object
      required:
        - type
        - targetClass
        - path
      properties:
        type:
          type: string
          enum:
            - MinCount
            - MaxCount
            - MinExclusive
            - MaxExclusive
            - MinInclusive
            - MaxInclusive
            - MinLength
            - MaxLength
            - Pattern
            - In
            - Equals
            - Disjoint
            - LessThan
            - LessThanOrEquals
            - GreaterThan
            - GreaterThanOrEquals
        targetClass:
          type: string
        path:
          type: string
        property:
          type: string
        constraintValue:
          type: array
          items:
            type: string
    RDFGraph:
      type: object
      required:
        - entities
        - diagrams
        - modelType
        - metadata
      properties:
        diagrams:
          type: array
          items:
            $ref: '#/components/schemas/Diagram'
        entities:
          type: array
          items:
            $ref: '#/components/schemas/GrapholscapeEntity'
        classInstanceEntities:
          type: array
          items:
            $ref: '#/components/schemas/ClassInstanceEntity'
        metadata:
          type: object
          required:
            - namespaces
          properties:
            name:
              type: string
            iri:
              type: string
            version:
              type: string
            languages:
              type: array
              items:
                type: string
            defaultLanguage:
              type: string
            namespaces:
              type: array
              items:
                $ref: '#/components/schemas/Namespace'
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/GrapholscapeAnnotation'
            annotationProperties:
              type: array
              items:
                type: string
        config:
          type: object
          properties:
            themes:
              type: array
              items:
                $ref: '#/components/schemas/Theme'
            selectedTheme:
              type: string
            language:
              type: string
            entityNameType:
              type: string
              enum:
                - label
                - prefixed_iri
                - full_iri
            renderers:
              type: array
              items:
                type: string
            widgets:
              type: object
            filters:
              type: array
              items:
                type: string
                enum:
                  - all
                  - data-property
                  - value-domain
                  - individual
                  - annotation-property
                  - universal_quantifier
                  - complement
                  - has-key
        selectedDiagramId:
          type: integer
        modelType:
          type: string
          enum:
            - ontology
            - vkg
            - rdf
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        creator:
          type: string
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/SHACLShape'
    EntityCount:
      title: EntityCount
      type: object
      properties:
        count:
          type: integer
          format: int64
        state:
          type: string
        error:
          type: string
        entity:
          $ref: '#/components/schemas/OntologyEntity'
    CountEntityInstancesInfo:
      title: CountEntityInstancesInfo
      type: object
      properties:
        countsMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityCount'
        percentage:
          type: number
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
        state:
          type: string
          enum:
            - RUNNING
            - READY
            - FINISHED
            - ERROR
    InstanceCheckingInfo:
      title: InstanceCheckingInfo
      type: object
      properties:
        resultClasses:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        percentage:
          type: number
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
        state:
          type: string
          enum:
            - READY
            - RUNNING
            - FINISHED
            - ERROR
            - STOPPED
    EntityMinMax:
      title: EntityMinMax
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/OntologyEntity'
        minMax:
          type: number
        error:
          type: string
        state:
          type: string
    MinMaxDatapropertiesInfo:
      title: MinMaxDatapropertiesInfo
      type: object
      properties:
        mins:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityMinMax'
        maxs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityMinMax'
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
        state:
          type: string
          enum:
            - RUNNING
            - READY
            - FINISHED
            - ERROR
        percentage:
          type: number
    MWSXDataSourceCoverage:
      title: DataSourceCoverage
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/MWSXDataSourceTableMetadata'
        unmappedTableCount:
          type: integer
          format: int32
        mappedTables:
          type: array
          items:
            $ref: '#/components/schemas/MWSXDataSourceTableMetadata'
        unmappedTables:
          type: array
          items:
            $ref: '#/components/schemas/MWSXDataSourceTableMetadata'
        mappedTableCount:
          type: integer
          format: int32
        totalTableCount:
          type: integer
          format: int32
    MWSXOntologyPredicatesStatistics:
      title: OntologyPredicatesStatistics
      type: object
      properties:
        predicatesStatistics:
          type: object
          additionalProperties:
            type: integer
        classesStatistics:
          type: object
          additionalProperties:
            type: integer
        dataPropertiesStatistics:
          type: object
          additionalProperties:
            type: integer
        objectPropertiesStatistics:
          type: object
          additionalProperties:
            type: integer
    MWSXPredicate:
      title: Predicate
      type: object
      properties:
        arity:
          type: integer
          format: int32
        serialVersionUID:
          type: integer
          format: int64
        name:
          type: string
        shortName:
          type: string
    MWSXOntologyCoverage:
      title: OntologyCoverage
      type: object
      properties:
        predicates:
          type: array
          items:
            $ref: '#/components/schemas/MWSXPredicate'
        unmappedPredicates:
          type: array
          items:
            $ref: '#/components/schemas/MWSXPredicate'
        mappedPredicates:
          type: array
          items:
            $ref: '#/components/schemas/MWSXPredicate'
        unmappedPredicatesCount:
          type: integer
          format: int32
        totalPredicatesCount:
          type: integer
          format: int32
        mappedPredicatesCount:
          type: integer
          format: int32
    MWSXQuarantineReason:
      title: QuarantinedReason
      type: object
      properties:
        objectID:
          type: string
        objectType:
          type: integer
          format: int32
        reason:
          type: string
    MWSXQuarantinedMappingReport:
      title: QuarantinedMappingReport
      type: object
      properties:
        viewDefinitionsCount:
          type: integer
          format: int32
        mappingsCount:
          type: integer
          format: int32
        quarantinedMappingsCount:
          type: integer
          format: int32
        quarantineReasonsByViewName:
          $ref: '#/components/schemas/MWSXQuarantineReason'
        quarantineReasonsByMappingId:
          $ref: '#/components/schemas/MWSXQuarantineReason'
        quarantinedViewDefinitionsCount:
          type: integer
          format: int32
    MWSXMappingReport:
      title: MappingReport
      type: object
      properties:
        dataSourceCoverage:
          $ref: '#/components/schemas/MWSXDataSourceCoverage'
        ontologyPredicatesStatistics:
          $ref: '#/components/schemas/MWSXOntologyPredicatesStatistics'
        ontologyCoverage:
          $ref: '#/components/schemas/MWSXOntologyCoverage'
        quarantinedMappingReport:
          $ref: '#/components/schemas/MWSXQuarantinedMappingReport'
    OntologySaturationParameters:
      title: OntologySaturationParameters
      type: object
      properties:
        classes:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        newVersionIRI:
          type: string
        format:
          type: string
    Branch:
      type: object
      properties:
        objectPropertyIRI:
          type: string
        cyclic:
          type: boolean
          description: It is true when domain and range are the same class.
        direct:
          type: boolean
        relatedClasses:
          type: array
          items:
            type: string
    SharedViewsProperties:
      type: object
      properties:
        views:
          type: array
          items:
            type: string
        dataProperties:
          type: array
          items:
            type: string
        annotationProperties:
          type: array
          items:
            type: string
    HighlightsSharedViews:
      type: object
      properties:
        classes:
          type: array
          description: Subclasses or brother classes
          items:
            type: string
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/Branch'
        sharedViewsProperties:
          type: array
          items:
            $ref: '#/components/schemas/SharedViewsProperties'
    OBDACatalog:
      title: OBDACatalog
      type: object
      properties:
        queryCatalog:
          type: array
          items:
            $ref: '#/components/schemas/SPARQLQuery'
    OBDASparqlingCatalog:
      title: OBDASparqlingCatalog
      type: object
      properties:
        queryCatalog:
          type: array
          items:
            $ref: '#/components/schemas/SparqlingSPARQLQuery'
    Highlights:
      type: object
      properties:
        classes:
          type: array
          description: Subclasses or brother classes
          items:
            type: string
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/Branch'
        dataProperties:
          type: array
          items:
            type: string
    ObjectPropertiesMultiEdge:
      type: object
      required:
        - sourceClassIRI
        - targetClassIRI
        - objectProperties
      properties:
        sourceClassIRI:
          type: string
        targetClassIRI:
          type: string
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/SparqlingEntity'
    OntologyMultiPath:
      type: object
      required:
        - nodes
        - edges
      properties:
        nodes:
          type: array
          description: The nodes of the ontology path
          items:
            $ref: '#/components/schemas/SparqlingEntity'
        edges:
          type: array
          description: The list of edges connecting two nodes
          items:
            $ref: '#/components/schemas/ObjectPropertiesMultiEdge'
    OntologyPath:
      properties:
        entities:
          type: array
          description: >-
            Starts with lastSelectedIRI and ends with clickedIRI. In between the
            nodes and edges traversed in the path (ISA edge are marked as ISA)
          items:
            $ref: '#/components/schemas/SparqlingEntity'
    MWSXOBDATriplificationRequest:
      title: OBDATriplificationRequest
      type: object
      properties:
        mappingID:
          type: string
        entityIriFilter:
          type: array
          items:
            type: string
        ontologyVersion:
          type: string
        ontologyName:
          type: string
        mappingIdFilter:
          type: array
          items:
            type: string
        outputRdfFormat:
          type: string
        dataSource:
          type: string
    MWSXOBDATriplificationProgress:
      title: OBDATriplificationProgress
      type: object
      properties:
        threadId:
          type: string
        progress:
          type: integer
          format: int32
        startTime:
          type: integer
          format: int64
        time:
          type: integer
          format: int64
        status:
          type: string
    MWSXOBDATriplificationMappingReport:
      title: OBDATriplificationMappingReport
      type: object
      properties:
        entityIRI:
          type: string
        triplesCount:
          type: integer
          format: int32
        sqlCode:
          type: string
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
        error:
          type: string
        elapsedTime:
          type: integer
          format: int64
    MWSXOBDATriplificationReport:
      title: OBDATriplificationReport
      type: object
      properties:
        request:
          $ref: '#/components/schemas/MWSXOBDATriplificationRequest'
        progress:
          $ref: '#/components/schemas/MWSXOBDATriplificationProgress'
        details:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXOBDATriplificationMappingReport'
    MWSXVirtualEntityField:
      title: VirtualEntityField
      type: object
      properties:
        fieldName:
          type: string
        nullable:
          type: boolean
        key:
          type: boolean
        fieldType:
          type: string
    MWSXVirtualEntity:
      title: VirtualEntity
      type: object
      properties:
        signature:
          type: array
          items:
            $ref: '#/components/schemas/MWSXVirtualEntityField'
        name:
          type: string
        description:
          type: string
        sparqlCode:
          type: string
        semantics:
          type: string
    SparqlingVirtualEntity:
      title: SparqlingVirtualEntity
      type: object
      properties:
        sparqlingSPARQLQuery:
          $ref: '#/components/schemas/SparqlingSPARQLQuery'
        entity:
          $ref: '#/components/schemas/MWSXVirtualEntity'
    SparqlingVirtualEntities:
      title: SparqlingVirtualEntities
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/SparqlingVirtualEntity'
    VKGSnapshot:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        lastModification:
          type: integer
          format: int64
        rdfGraph:
          $ref: '#/components/schemas/RDFGraph'
    BasePropertyInfo:
      type: object
      properties:
        inherited:
          type: boolean
        dataPropertyIri:
          type: string
        pathToDataProperty:
          $ref: '#/components/schemas/OntologyPath'
        log:
          type: boolean
    CustomNodeRendering:
      type: object
      properties:
        classNodes:
          type: object
          properties:
            size:
              type: number
            color:
              type: string
            icon:
              type: string
        instanceNodes:
          type: object
          properties:
            size:
              allOf:
                - $ref: '#/components/schemas/BasePropertyInfo'
                - type: object
                  properties:
                    aggregation:
                      type: string
            color:
              type: object
              allOf:
                - $ref: '#/components/schemas/BasePropertyInfo'
                - type: object
                  properties:
                    aggregation:
                      type: string
                    scale:
                      type: object
                      required:
                        - scaleID
                      properties:
                        scaleID:
                          description: >-
                            Color scale identifier for chroma.js (i.e "OrRd"),
                            @see https://gka.github.io/chroma.js/#chroma-brewer
                          type: string
                        intervals:
                          description: >-
                            Custom scale intervals, to be used with chroma.js.
                            @see https://gka.github.io/chroma.js/#scale-classes
                          type: array
                          items:
                            type: number
            icon:
              $ref: '#/components/schemas/BasePropertyInfo'
            location:
              $ref: '#/components/schemas/BasePropertyInfo'
            coordinates:
              type: object
              required:
                - dataPropertyIriX
                - dataPropertyIriY
              properties:
                dataPropertyIriX:
                  type: string
                dataPropertyIriY:
                  type: string
    CustomNodeRenderingMap:
      description: Map <classIri, CustomRendering>
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CustomNodeRendering'
    Agent:
      title: Agent
      type: object
      properties:
        agentAddress:
          type: string
        agentEmail:
          type: string
        agentLabels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        agentWebsite:
          type: string
        agentIri:
          type: string
    KnowledgeGraph:
      title: KnowledgeGraph
      type: object
      properties:
        kgDescriptions:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        kgTitle:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        kgRightsHolder:
          $ref: '#/components/schemas/Agent'
        kgIri:
          type: string
        kgCreator:
          $ref: '#/components/schemas/User'
        kgPublisher:
          $ref: '#/components/schemas/Agent'
        kgTriples:
          type: integer
          format: int64
        kgContributors:
          type: array
          items:
            $ref: '#/components/schemas/User'
        kgCreationTs:
          type: integer
          format: int64
        kgLastModifiedTs:
          type: integer
          format: int64
        kgType:
          type: string
          enum:
            - JENA
            - RDF4J
        prefixes:
          type: object
          additionalProperties:
            type: string
    KGStatus:
      title: KGStatus
      type: object
      properties:
        modelsNumber:
          type: integer
          format: int32
        triplesNumber:
          type: integer
          format: int32
        status:
          type: string
    KnowledgeGraphDestination:
      title: KnowledgeGraphDestination
      type: object
      properties:
        namedGraph:
          type: string
        destination:
          type: string
    KnowledgeGraphFile:
      title: KnowledgeGraphFile
      type: object
      properties:
        file:
          $ref: '#/components/schemas/FileInfo'
        destination:
          $ref: '#/components/schemas/KnowledgeGraphDestination'
    ClassStats:
      title: ClassStats
      type: object
      properties:
        instancesNumber:
          type: integer
          format: int32
        classIri:
          type: string
    InstanceLabelType:
      title: InstanceLabelType
      type: object
      properties:
        description:
          type: string
        iri_short:
          type: string
        label:
          type: string
        type:
          type: string
        type_short:
          type: string
    KnowledgeGraphUnion:
      title: KnowledgeGraphUnion
      type: object
      properties:
        sourceKg:
          type: string
        target:
          $ref: '#/components/schemas/KnowledgeGraphDestination'
    KnowledgeGraphOntologyUnion:
      title: KnowledgeGraphOntologyUnion
      type: object
      properties:
        source:
          $ref: '#/components/schemas/OntologyVersion'
        target:
          $ref: '#/components/schemas/KnowledgeGraphDestination'
    SPARQLQueryExecution:
      title: SPARQLQueryExecution
      type: object
      properties:
        queryID:
          type: string
    KgConstructResults:
      title: KgConstructResults
      type: object
      properties:
        execution:
          $ref: '#/components/schemas/SPARQLQueryExecution'
        source:
          type: string
    KnowledgeGraphDestinationQueryKg:
      title: KnowledgeGraphDestinationQueryKg
      type: object
      properties:
        source:
          $ref: '#/components/schemas/KgConstructResults'
        target:
          $ref: '#/components/schemas/KnowledgeGraphDestination'
    ObjectLiteral:
      title: ObjectLiteral
      type: object
      properties:
        object_literal:
          type: string
    SubjectDataProperty:
      title: SubjectDataProperty
      type: object
      properties:
        predicate:
          type: string
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ObjectLiteral'
        predicate_short:
          type: string
        instance_count:
          type: integer
          format: int32
        page_count:
          type: integer
          format: int32
    ObjectType:
      title: ObjectType
      type: object
      properties:
        object_type:
          type: string
        object_type_short:
          type: string
        instance_count:
          type: integer
          format: int32
        page_count:
          type: integer
          format: int32
    SubjectObjectProperty:
      title: SubjectObjectProperty
      type: object
      properties:
        predicate:
          type: string
        objects_types:
          type: array
          items:
            $ref: '#/components/schemas/ObjectType'
        predicate_short:
          type: string
        instance_count:
          type: integer
          format: int32
        page_count:
          type: integer
          format: int32
    InstanceSubjectTripsGroup:
      title: InstanceSubjectTripsGroup
      type: object
      properties:
        subject_data_properties:
          type: array
          items:
            $ref: '#/components/schemas/SubjectDataProperty'
        subject_object_properties:
          type: array
          items:
            $ref: '#/components/schemas/SubjectObjectProperty'
    SubjectType:
      title: SubjectType
      type: object
      properties:
        subject_type:
          type: string
        subject_type_short:
          type: string
        instance_count:
          type: integer
          format: int32
        page_count:
          type: integer
          format: int32
    ObjectTriple:
      title: ObjectTriple
      type: object
      properties:
        predicate:
          type: string
        subjects_types:
          type: array
          items:
            $ref: '#/components/schemas/SubjectType'
        predicate_short:
          type: string
        instance_count:
          type: integer
          format: int32
        page_count:
          type: integer
          format: int32
    InstanceObjectTripsGroup:
      title: InstanceObjectTripsGroup
      type: object
      properties:
        object_triples:
          type: array
          items:
            $ref: '#/components/schemas/ObjectTriple'
    InstancePage:
      title: InstancePage
      type: object
      properties:
        subjects:
          $ref: '#/components/schemas/InstanceSubjectTripsGroup'
        objects:
          $ref: '#/components/schemas/InstanceObjectTripsGroup'
        title:
          $ref: '#/components/schemas/InstanceLabelType'
    Subject:
      title: Subject
      type: object
      properties:
        subject_resource:
          type: string
        subject_label:
          type: string
        subject_resource_short:
          type: string
    ObjectTriplePage:
      title: ObjectTriplePage
      type: object
      properties:
        predicate:
          type: string
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        predicate_short:
          type: string
    ObjectPredicatePageType:
      title: ObjectPredicatePageType
      type: object
      properties:
        object_triples:
          type: array
          items:
            $ref: '#/components/schemas/ObjectTriplePage'
    SubjectDataPropertyPage:
      title: SubjectDataPropertyPage
      type: object
      properties: {}
    ObjectProperty:
      title: ObjectProperty
      type: object
      properties:
        object_resource_short:
          type: string
        object_resource:
          type: string
        object_label:
          type: string
    SubjectObjectPropertyPage:
      title: SubjectObjectPropertyPage
      type: object
      properties:
        predicate:
          type: string
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ObjectProperty'
        predicate_short:
          type: string
    SubjectPredicatePageType:
      title: SubjectPredicatePageType
      type: object
      properties:
        subject_data_properties:
          type: array
          items:
            $ref: '#/components/schemas/SubjectDataPropertyPage'
        subject_object_properties:
          type: array
          items:
            $ref: '#/components/schemas/SubjectObjectPropertyPage'
    KGStoreFileInfoEntry:
      title: KGStoreFileInfoEntry
      type: object
      properties:
        originalFileName:
          type: string
        fileName:
          type: string
        userName:
          type: string
        timestamp:
          type: integer
          format: int64
    KnowledgeGraphFileDestination:
      title: KnowledgeGraphFileDestination
      type: object
      properties:
        fileNames:
          type: array
          items:
            type: string
        kgDestination:
          $ref: '#/components/schemas/KnowledgeGraphDestination'
    KnowledgeGraphFileInfo:
      title: KnowledgeGraphFileInfo
      type: object
      properties:
        numberOfTriples:
          type: integer
          format: int64
        fileName:
          type: string
        uploadDate:
          type: integer
          format: int64
        importingTime:
          type: integer
          format: int64
        imported:
          type: boolean
    OBDAConstructResults:
      title: OBDAConstructResults
      type: object
      properties:
        execution:
          $ref: '#/components/schemas/SPARQLQueryExecution'
        source:
          $ref: '#/components/schemas/MastroID'
    KnowledgeGraphDestinationQueryOBDA:
      title: KnowledgeGraphDestinationQueryOBDA
      type: object
      properties:
        source:
          $ref: '#/components/schemas/OBDAConstructResults'
        target:
          $ref: '#/components/schemas/KnowledgeGraphDestination'
    CsvImportInfo:
      title: CsvImportInfo
      type: object
      properties:
        fileName:
          type: string
        constructTemplate:
          type: string
        kgDestination:
          $ref: '#/components/schemas/KnowledgeGraphDestination'
    KgCsvImportReport:
      title: KgCsvImportReport
      type: object
      properties:
        csvImportThreadId:
          type: string
        csvImportThreadState:
          type: string
        csvImportInfo:
          $ref: '#/components/schemas/CsvImportInfo'
        csvColumnNames:
          type: array
          items:
            type: string
        triplesCreatedCount:
          type: integer
        csvLinesProcessedCount:
          type: integer
        csvLinesImportedCount:
          type: integer
        csvLinesErrorCount:
          type: integer
        rejectedLines:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        rejectedLineErrorMessages:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mainError:
          type: object
        timeStart:
          type: integer
          format: int64
        timeEnd:
          type: integer
          format: int64
        generatedTriplesFile:
          type: string
        numberOfTriplesPerLine:
          type: integer
    OntologyDraftInfo:
      type: object
      properties:
        name:
          type: string
        iri:
          type: string
        version:
          type: string
        lastModification:
          type: integer
          format: int64
    MWSXOntologyCatalogEntry:
      title: OntologyCatalogEntry
      type: object
      properties:
        ontologyVersion:
          type: string
        ontologyName:
          type: string
    MWSXOntologyCatalogEntries:
      title: OntologyCatalogEntries
      type: object
      properties:
        entries:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MWSXOntologyCatalogEntry'
    AvpTreeNode:
      title: AvpTreeNode
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/AvpTreeNode'
        entities:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    AvpTree:
      title: AvpTree
      type: object
      properties:
        objectPropertyTree:
          $ref: '#/components/schemas/AvpTreeNode'
        classTree:
          $ref: '#/components/schemas/AvpTreeNode'
        dataPropertyTree:
          $ref: '#/components/schemas/AvpTreeNode'
    AvpOntologyTree:
      title: AvpOntologyTree
      type: object
      properties:
        avpTree:
          $ref: '#/components/schemas/AvpTree'
    MWSXAuthorizationViewProfile:
      title: AuthorizationViewProfile
      type: object
      properties:
        dataProperties:
          type: array
          items:
            type: string
        classes:
          type: array
          items:
            type: string
        objectProperties:
          type: array
          items:
            type: string
        id:
          type: string
    AuthorizationViewProfileInfo:
      title: AuthorizationViewProfileInfo
      type: object
      properties:
        mappingId:
          type: string
        ontologyVersion:
          type: string
        profile:
          $ref: '#/components/schemas/MWSXAuthorizationViewProfile'
        ontologyName:
          type: string
        description:
          type: string
    IDashboardCardSettings:
      title: IDashboardCardSettings
      type: object
      properties: {}
    DashboardCard:
      title: DashboardCard
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/IDashboardCardSettings'
        backgroundColor:
          type: string
        x:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
        'y':
          type: integer
          format: int32
        description:
          type: string
        id:
          type: integer
          format: int32
        title:
          type: string
        height:
          type: integer
          format: int32
    DashboardTab:
      title: DashboardTab
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/DashboardCard'
        compactType:
          type: string
        title:
          type: string
        queryParametersValues:
          type: object
          additionalProperties:
            type: string
    Dashboard:
      title: Dashboard
      type: object
      properties:
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/DashboardTab'
        description:
          type: string
        id:
          type: string
        title:
          type: string
    Dashboards:
      title: Dashboards
      type: object
      properties:
        dashboards:
          type: array
          items:
            $ref: '#/components/schemas/Dashboard'
    AbstractDataQualityConstraint:
      title: AbstractDataQualityConstraint
      type: object
      properties:
        id:
          type: string
        entity:
          $ref: '#/components/schemas/OntologyEntity'
    SubClassWithForAllAssertion:
      title: SubClassWithForAllAssertion
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataQualityConstraint'
      properties:
        property:
          $ref: '#/components/schemas/OntologyEntity'
        direct:
          type: boolean
        filler:
          $ref: '#/components/schemas/OntologyEntity'
    FunctionalPropertyAssertion:
      title: FunctionalPropertyAssertion
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataQualityConstraint'
      properties:
        direct:
          type: boolean
    DisjointClasses:
      title: DisjointClasses
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataQualityConstraint'
      properties:
        disjointClass:
          $ref: '#/components/schemas/OntologyEntity'
    MandatoryParticipationAssertion:
      title: MandatoryParticipationAssertion
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataQualityConstraint'
      properties:
        property:
          $ref: '#/components/schemas/OntologyEntity'
        direct:
          type: boolean
        filler:
          $ref: '#/components/schemas/OntologyEntity'
    HasKeyAssertion:
      title: HasKeyAssertion
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataQualityConstraint'
      properties:
        dataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        direct:
          type: array
          items:
            type: boolean
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
    SubClassWithCardinalityAssertion:
      title: SubClassWithCardinalityAssertion
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataQualityConstraint'
      properties:
        cardinalityType:
          type: string
          enum:
            - EXACT
            - MAX
            - MIN
        property:
          $ref: '#/components/schemas/OntologyEntity'
        direct:
          type: boolean
        filler:
          $ref: '#/components/schemas/OntologyEntity'
        cardinality:
          type: integer
          format: int32
    IdentificationPathElement:
      title: IdentificationPathElement
      type: object
      properties:
        inverse:
          type: boolean
        entity:
          $ref: '#/components/schemas/OntologyEntity'
    IdentificationPath:
      title: IdentificationPath
      type: object
      properties:
        path:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationPathElement'
    IdentificationAssertion:
      title: IdentificationAssertion
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataQualityConstraint'
      properties:
        identificationPaths:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationPath'
    OntologyConstraints:
      title: OntologyConstraints
      type: object
      properties:
        universals:
          type: array
          items:
            $ref: '#/components/schemas/SubClassWithForAllAssertion'
        functionalities:
          type: array
          items:
            $ref: '#/components/schemas/FunctionalPropertyAssertion'
        disjointnesses:
          type: array
          items:
            $ref: '#/components/schemas/DisjointClasses'
        mandatories:
          type: array
          items:
            $ref: '#/components/schemas/MandatoryParticipationAssertion'
        keys:
          type: array
          items:
            $ref: '#/components/schemas/HasKeyAssertion'
        cardinalities:
          type: array
          items:
            $ref: '#/components/schemas/SubClassWithCardinalityAssertion'
        identifications:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationAssertion'
    DataQualityCheck:
      title: DataQualityCheck
      type: object
      properties:
        id:
          type: string
        priority:
          type: integer
          format: int32
    DataQualityCheckSet:
      title: DataQualityCheckSet
      type: object
      properties:
        ontologyConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheck'
        mappingParameters:
          type: object
          additionalProperties:
            type: string
        id:
          type: string
        user:
          type: string
    DataQualityCheckStatus:
      title: DataQualityCheckStatus
      type: object
      properties:
        resultsCount:
          type: integer
          format: int32
        id:
          type: string
        queryExecutionId:
          type: string
        status:
          type: string
    DataQualityCheckSetStatus:
      title: DataQualityCheckSetStatus
      type: object
      properties:
        ontologyConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheckStatus'
        status:
          type: string
    DataQualityCheckExecutionLog:
      title: DataQualityCheckExecutionLog
      type: object
      properties:
        direct:
          type: array
          items:
            type: boolean
        errorMessage:
          type: string
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        priority:
          type: integer
          format: int32
        type:
          type: string
        sqlQueries:
          type: array
          items:
            type: string
        cardinality:
          type: integer
          format: int32
        executionTime:
          type: integer
          format: int32
        dataProperties:
          type: array
          items:
            $ref: '#/components/schemas/OntologyEntity'
        cardinalityType:
          type: integer
          format: int32
        checkSemantics:
          type: string
        resultsCount:
          type: integer
          format: int32
        property:
          $ref: '#/components/schemas/OntologyEntity'
        filler:
          $ref: '#/components/schemas/OntologyEntity'
        sparqlCode:
          type: string
        id:
          type: string
        results:
          $ref: '#/components/schemas/SPARQLResults'
        entity:
          $ref: '#/components/schemas/OntologyEntity'
        status:
          type: string
        disjointEntity:
          $ref: '#/components/schemas/OntologyEntity'
    DataQualityCheckSetExecutionLog:
      title: DataQualityCheckSetExecutionLog
      type: object
      properties:
        ontologyConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheckExecutionLog'
        endpoint:
          type: string
        endpointInfo:
          $ref: '#/components/schemas/Endpoint'
        endTimestamp:
          type: integer
          format: int64
        user:
          type: string
        checkSetId:
          type: string
        timestamp:
          type: integer
          format: int64
    DataQualityCheckSetExecutionLogs:
      title: DataQualityCheckSetExecutionLogs
      type: object
      properties:
        executions:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
    DataQualityCheckSetDump:
      title: DataQualityCheckSetDump
      type: object
      properties:
        set:
          $ref: '#/components/schemas/DataQualityCheckSet'
        constraints:
          $ref: '#/components/schemas/OntologyConstraints'
    DataQualityCheckSetImportReport:
      title: DataQualityCheckSetImportReport
      type: object
      properties:
        actualCheckSet:
          $ref: '#/components/schemas/DataQualityCheckSet'
        importReport:
          type: object
    OntologyOpeningEvent:
      title: OntologyOpeningEvent
      type: object
      properties:
        deleted:
          type: boolean
        onto:
          $ref: '#/components/schemas/OntologyID'
        timestamp:
          type: integer
          format: int64
    KGOpeningEvent:
      title: KGOpeningEvent
      type: object
      properties:
        iri:
          type: string
        timestamp:
          type: integer
          format: int64
    LicenseInfoDetail:
      title: LicenseInfoDetail
      type: object
      properties:
        detailName:
          type: string
        detailValue:
          type: string
    LicenseInfo:
      title: LicenseInfo
      type: object
      properties:
        licenseType:
          type: string
        SERVER_IP_ADDRESS:
          type: string
        productVersion:
          type: string
        licensee:
          type: string
        licensor:
          type: string
        generationDate:
          type: integer
          format: int64
        MAX_NUMBER_OF_ONTOLOGIES_ALLOWED:
          type: string
        productName:
          type: string
        licenseInfoDetails:
          type: array
          items:
            $ref: '#/components/schemas/LicenseInfoDetail'
        MAX_NUMBER_OF_USERS_ALLOWED:
          type: string
        expirationDate:
          type: integer
          format: int64
    OntologyVersionStorageReport:
      title: OntologyVersionStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        fileCount:
          type: integer
          format: int32
    OntologyStorageReport:
      title: OntologyStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        versions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OntologyVersionStorageReport'
        fileCount:
          type: integer
          format: int32
    OntologiesStorageReport:
      title: OntologiesStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        fileCount:
          type: integer
          format: int32
        ontologies:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OntologyStorageReport'
    SystemFolderStorageReport:
      title: SystemFolderStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        fileCount:
          type: integer
          format: int32
    SystemFoldersStorageReport:
      title: SystemFoldersStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        fileCount:
          type: integer
          format: int32
        systemFoldersStorageReport:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SystemFolderStorageReport'
    KgStorageReport:
      title: KgStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        fileCount:
          type: integer
          format: int32
    KgsStorageReport:
      title: KgsStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        kgs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/KgStorageReport'
        fileCount:
          type: integer
          format: int32
    SystemStorageReport:
      title: SystemStorageReport
      type: object
      properties:
        totalSize:
          type: integer
          format: int64
        ontologiesStorageReport:
          $ref: '#/components/schemas/OntologiesStorageReport'
        user:
          type: string
        fileCount:
          type: integer
          format: int32
        systemFoldersStorageReport:
          $ref: '#/components/schemas/SystemFoldersStorageReport'
        kgsStorageReport:
          $ref: '#/components/schemas/KgsStorageReport'
        timestamp:
          type: integer
          format: int64
    SystemFolderDeletionReport:
      title: SystemFolderDeletionReport
      type: object
      properties:
        deletedFilesCount:
          type: integer
          format: int32
        deletedFiles:
          type: array
          items:
            type: string
        failedDelationFiles:
          type: array
          items:
            type: string
        freeSpaceCreated:
          type: integer
          format: int64
    SessionSnapshot:
      title: SessionSnapshot
      type: object
      properties:
        expirationTimeText:
          type: string
        expirationTime:
          type: integer
          format: int64
        neverExpires:
          type: boolean
        lastUpdate:
          type: integer
          format: int64
        operationsCount:
          type: integer
          format: int32
        startTime:
          type: integer
          format: int64
        id:
          type: string
        user:
          type: string
        startTimeText:
          type: string
    EndpointMemorySnapshot:
      title: MemorySnapshot
      type: object
      properties:
        endpointsMemorySnapshot:
          type: object
    CacheMemorySnapshot:
      title: MemorySnapshot
      type: object
      properties:
        cachedTboxes:
          type: integer
        cachedOwlOntologies:
          type: integer
        cachedClosedOwlOntologies:
          type: integer
        cachedMappingManagers:
          type: integer
        cachedMastroAPIInstances:
          type: integer
        cachedEndpointMastroAPIInstances:
          type: integer
        cachedDataQualityCheckThreads:
          type: integer
        cachedAnnotationProcessorThreads:
          type: integer
        cachedCountEntityInstancesThreads:
          type: integer
        cachedMinMaxDataPropertiesThread:
          type: integer
        cachedInstanceCheckingThreads:
          type: integer
    MemorySnapshot:
      title: MemorySnapshot
      type: object
      properties:
        endpointMemorySnapshot:
          $ref: '#/components/schemas/EndpointMemorySnapshot'
        cacheMemorySnapshot:
          $ref: '#/components/schemas/CacheMemorySnapshot'
    Snapshot:
      title: Snapshot
      type: object
      properties:
        sessions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SessionSnapshot'
        systemParameters:
          type: object
          additionalProperties:
            type: string
        currentlyActiveSessionCount:
          type: integer
          format: int32
        memorySnapshot:
          $ref: '#/components/schemas/MemorySnapshot'
    MwsxUserLogMessage:
      title: MwsxUserLogMessage
      type: object
      properties:
        userName:
          type: string
        timestamp:
          type: integer
          format: int64
        resource:
          type: string
        method:
          type: string
        templateParams:
          type: object
        queryParams:
          type: object
        statusCode:
          type: integer
    GeocodingServer:
      title: GeocodingServer
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        user:
          type: string
        password:
          type: string
    GeocodingServers:
      title: GeocodingServers
      type: object
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/GeocodingServer'
    IssueReportRequest:
      title: IssueReportRequest
      type: object
      properties:
        mappingId:
          type: string
        ontologyVersion:
          type: string
        ontologyName:
          type: string
        errorMessage:
          type: string
        endpointName:
          type: string
        description:
          type: string
        monolithVersion:
          type: string
        datasourceName:
          type: string
        error:
          type: string
        httpMethod:
          type: string
        queryExecutionId:
          type: string
        httpRoute:
          type: string
    JDBCDriver:
      title: JDBCDriver
      type: object
      properties:
        urlTemplate:
          type: string
        name:
          type: string
        version:
          type: string
    Tags:
      title: Tags
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/MwsxTag'
    AccessLog:
      type: object
      properties:
        username:
          type: string
        timestamp:
          type: integer
    OntologyUsageLog:
      type: object
      required:
        - value
        - property
      properties:
        ontology:
          $ref: '#/components/schemas/OntologyID'
        count:
          type: integer
    QueryUsageLog:
      type: object
      properties:
        username:
          type: string
        timestamp:
          type: integer
        queryCode:
          type: string
    EntityUsageLog:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/OntologyEntity'
        count:
          type: integer
    MwsxTaskSchedulerJobData:
      title: MwsxTaskSchedulerJobData
      type: object
      properties:
        className:
          type: string
        jobData:
          type: object
          additionalProperties:
            type: string
        cronExpression:
          type: string
    MwsxTaskSchedulerJobEntry:
      title: MwsxTaskSchedulerJobEntry
      type: object
      properties:
        jobId:
          type: string
        jobData:
          $ref: '#/components/schemas/MwsxTaskSchedulerJobData'
        creationTime:
          type: integer
        startTime:
          type: integer
        endTime:
          type: integer
        state:
          type: string
        messages:
          type: array
          items:
            type: string
        customJobEntryData:
          type: object
        error:
          type: object
        user:
          type: string
    Users:
      title: Users
      type: object
      properties:
        genericRoles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        enabledDomainChecks:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    UsersCreationReport:
      title: UsersCreationReport
      type: object
      properties:
        added:
          type: array
          items:
            type: string
        ignored:
          type: array
          items:
            type: string
        failed:
          type: array
          items:
            type: string
    PermissionParameters:
      title: PermissionParameters
      type: object
      properties:
        domains:
          type: array
          items:
            type: string
        actions:
          type: array
          items:
            type: string
    RoleMonolith:
      title: RoleMonolith
      type: object
      properties:
        name:
          type: string
        deactivatedMenus:
          type: array
          items:
            type: string
    UserFeedbackComment:
      title: UserFeedbackComment
      type: object
      properties:
        rating:
          type: number
        timestamp:
          type: integer
          format: int64
        comment:
          type: string
    UserFeedback:
      title: UserFeedback
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/UserFeedbackComment'
    UsersFeedback:
      title: UsersFeedback
      type: object
      properties:
        usersFeedback:
          additionalProperties:
            $ref: '#/components/schemas/UserFeedback'
x-tagGroups:
  - name: Authentication API
    tags:
      - authentication_Login
      - authentication_Logout
  - name: Ontology API model
    tags:
      - ontologies_Persistence
      - ontologies_Logical
      - ontologies_Reasoning
      - ontologies_Upload
      - ontologies_Metadata
      - ontologies_Visualize
      - ontologies_Difference
      - ontologies_Publication
      - ontologies_FileSystem
  - name: Mappings API model
    tags:
      - mappings_Persistence
      - mappings_Analysis
      - mappings_Test
      - mappings_Info
      - mappings_Template
      - mappings_Assertion
      - mappings_SQLView
      - mappings_IntensionalAnnotation
      - mappings_Dependencies
      - mappings_Parameters
      - mappings_Database
      - mappings_other
      - mappings_DataLineage
  - name: Datasources API model
    tags:
      - datasources_Persistence
      - datasources_Metadata
      - datasources_Drivers
      - datasources_Test
  - name: Endpoints API model
    tags:
      - endpoints_Persistence
      - endpoints_Referring
      - endpoints_Info
      - endpoints_Status
      - endpoints_Empties
      - endpoints_Highlights
      - endpoints_QueryCount
      - endpoints_Query
      - endpoints_ExportedQuery
      - endpoints_ConstructQuery
      - endpoints_VKG
      - endpoints_CountEntityInstances
      - endpoints_InstanceChecking
      - endpoints_MinMaxDataProperties
      - endpoints_MappingAnalysis
  - name: Queries API model
    tags:
      - query-catalog_Persistence
      - query-catalog_Utils
      - query-catalog_Publication
  - name: Sparqling API model
    tags:
      - sparqling_OntologyGraph
      - sparqling_QueryGraphBGP
      - sparqling_QueryGraphHead
      - sparqling_QueryGraphFilter
      - sparqling_QueryGraphOptional
      - sparqling_QueryGraphExtra
      - sparqling_VisualizeSPARQL
      - sparqling_Highlights
      - sparqling_Construct
      - sparqling_Visualize
  - name: Triplify API model
    tags:
      - triplify_Execution
      - triplify_Threads
      - triplify_Start
  - name: Virtual Entities API model
    tags:
      - virtual-entities_Persistence
  - name: VKG API model
    tags:
      - vkg_Persistence
      - vkg_NodeRendering
  - name: KG API model
    tags:
      - knowledge-graphs_Persistence
      - knowledge-graphs_General
      - knowledge-graphs_FileSystem
      - knowledge-graphs_Status
      - knowledge-graphs_Classes
      - knowledge-graphs_Instances
      - knowledge-graphs_Union
      - knowledge-graphs_Query
      - knowledge-graphs_Upload
      - knowledge-graphs_CSV
  - name: Ontology Designer API model
    tags:
      - ontology-designer_Persistence
  - name: Ontology Catalog API model
    tags:
      - ontology-catalog_Persistence
      - ontology-catalog_Query
  - name: AVPs API model
    tags:
      - authorization-view-profiles_Logical
      - authorization-view-profiles_Persistence
  - name: Dashboards API model
    tags:
      - dashboards_Persistence
  - name: Data Quality API model
    tags:
      - data-quality_Constraints
      - data-quality_CheckSet
      - data-quality_SHACL
  - name: Misc API model
    tags:
      - misc_Logger
      - misc_Versions
      - misc_Resources
      - misc_Mastro
      - misc_LastLoaded
      - misc_GlobalAnnotation
      - misc_Server
      - misc_Geocoding
      - misc_Statics
      - misc_System
      - misc_QueryTags
      - misc_Statistics
  - name: Task Scheduler API model
    tags:
      - task-scheduler_State
      - task-scheduler_Actions
      - task-scheduler_Persistence
      - task-scheduler_Execution
  - name: Users & Roles API model
    tags:
      - users-roles_User
      - users-roles_Roles
      - users-roles_MonolithRole
