openapi: 3.0.0
info:
  description: This is the API for Data Quality in Mastro. It generates queries and execute them in order to verify if the underlying data in the DBMS is consistent with the ontology.
  version: 1.0.0
  title: Data Quality API model
  contact:
    email: info@obdasystems.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{protocol}://{tenant}{port}/mws/rest/mwsx'
    variables:
      protocol:
        default: https
      tenant:
        default: localhost
      port:
        default: ':8989'
security:
  - apiKey: []
  - jwt: []
paths:
  /owlOntology/{name}/version/ontologyConstraints:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints
      operationId: get_ontologyConstraints
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyConstraints'
  /owlOntology/{name}/version/ontologyConstraints/set:
    post:
      summary: POST mwsx/owlOntology/{name}/version/ontologyConstraints/set
      operationId: post_ontologyConstraints_check_start
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataQualityCheckSet'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/set
      operationId: get_ontologyConstraints_check_sets
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataQualityCheckSet'
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}
      operationId: get_ontologyConstraints_check_set_setId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSet'
    delete:
      summary: DELETE mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}
      operationId: delete_ontologyConstraints_check_set_setId
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSet'
    put:
      summary: PUT mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}
      operationId: put_ontologyConstraints_check
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataQualityCheckSet'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSet'
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/start/{endpoint}:
    put:
      summary: PUT mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/start/{endpoint}
      operationId: put_ontologyConstraints_check_start
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: endpoint
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: answersBufferSize
          in: query
          required: true
          schema:
            type: string
        - name: autosave
          in: query
          required: true
          schema:
            type: string
        - name: concurrentChecksNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/stop:
    put:
      summary: PUT mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/stop
      operationId: put_ontologyConstraints_check_stop
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/removeThread:
    delete:
      summary: DELETE mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/removeThread
      operationId: delete_ontologyConstraints_check_removeThread
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/status:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/status
      operationId: get_ontologyConstraints_check_status
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetStatus'
  /owlOntology/{name}/version/ontologyConstraints/sets/running:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/sets/running
      operationId: get_ontologyConstraints_check_running
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /owlOntology/{name}/version/ontologyConstraints/sets/executionLogs:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/sets/executionLogs
      operationId: get_ontologyConstraints_execution_log
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLogs'
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLog:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLog
      operationId: get_ontologyConstraints_checkSetId_execution_log
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLogs'
    put:
      summary: PUT mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLog
      operationId: put_ontologyConstraints_checkSetId_execution_timestamps
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLogs/timestamps:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLogs/timestamps
      operationId: get_ontologyConstraints_checkSetId_execution_timestamps
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLogs/timestamp/{timestamp}:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLogs/timestamp/{timestamp}
      operationId: get_ontologyConstraints_checkSetId_execution_timestamp
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
    delete:
      summary: DELETE mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLogs/timestamp/{timestamp}
      operationId: delete_ontologyConstraints_checkSetId_execution_timestamp
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLog/timestamps:
    delete:
      summary: DELETE mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/executionLog/timestamps
      operationId: delete_ontologyConstraints_checkSetId_execution_timestamps
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
  /owlOntology/{name}/version/ontologyConstraints/set/{setId}/dump:
    get:
      summary: GET mwsx/owlOntology/{name}/version/ontologyConstraints/set/{setId}/dump
      operationId: get_ontologyConstraints_checkSetId_export
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: setId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetDump'
  /owlOntology/{name}/version/ontologyConstraints/sets/dump:
    post:
      summary: POST mwsx/owlOntology/{name}/version/ontologyConstraints/sets/dump
      operationId: post_ontologyConstraints_checkSetId_import
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
        - name: importMappingParameters
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataQualityCheckSetDump'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQualityCheckSetImportReport'
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-MONOLITH-SESSION-ID
      description: |
        This session ID is generated from Basic Authentication on the login route.
    jwt:
      description: |
        Generate your JWT when you log in. JWT configurations should be placed in `$MASTRO_HOME/config/mastro.jwt` file
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Label:
      title: Label
      type: object
      properties:
        lang:
          type: string
        content:
          type: string
    MWSEntity:
      title: MWSEntity
      type: object
      properties:
        entityLabels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        isDeprecated:
          type: boolean
        entityIRI:
          type: string
        entityType:
          type: string
        entityPrefixIRI:
          type: string
        entityRemainder:
          type: string
        entityID:
          type: string
    SubClassWithForAllAssertion:
      title: SubClassWithForAllAssertion
      type: object
      properties:
        property:
          $ref: '#/components/schemas/MWSEntity'
        direct:
          type: boolean
        filler:
          $ref: '#/components/schemas/MWSEntity'
    FunctionalPropertyAssertion:
      title: FunctionalPropertyAssertion
      type: object
      properties:
        direct:
          type: boolean
    DisjointClasses:
      title: DisjointClasses
      type: object
      properties:
        disjointClass:
          $ref: '#/components/schemas/MWSEntity'
    MandatoryParticipationAssertion:
      title: MandatoryParticipationAssertion
      type: object
      properties:
        property:
          $ref: '#/components/schemas/MWSEntity'
        direct:
          type: boolean
        filler:
          $ref: '#/components/schemas/MWSEntity'
    HasKeyAssertion:
      title: HasKeyAssertion
      type: object
      properties:
        dataProperties:
          type: array
          items:
            $ref: '#/components/schemas/MWSEntity'
        direct:
          type: array
          items:
            type: boolean
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/MWSEntity'
    SubClassWithCardinalityAssertion:
      title: SubClassWithCardinalityAssertion
      type: object
      properties:
        MIN_CARDINALITY_TYPE:
          type: integer
          format: int32
        cardinalityType:
          type: integer
          format: int32
        property:
          $ref: '#/components/schemas/MWSEntity'
        direct:
          type: boolean
        filler:
          $ref: '#/components/schemas/MWSEntity'
        EXACT_CARDINALITY_TYPE:
          type: integer
          format: int32
        MAX_CARDINALITY_TYPE:
          type: integer
          format: int32
        cardinality:
          type: integer
          format: int32
    OntologyEntity:
      title: Entity
      type: object
      properties:
        entityLabels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        isDeprecated:
          type: boolean
        entityIRI:
          type: string
        entityType:
          type: string
        entityPrefixIRI:
          type: string
        entityRemainder:
          type: string
        entityID:
          type: string
    IdentificationPathElement:
      title: IdentificationPathElement
      type: object
      properties:
        inverse:
          type: boolean
        entity:
          $ref: '#/components/schemas/OntologyEntity'
    IdentificationPath:
      title: IdentificationPath
      type: object
      properties:
        path:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationPathElement'
    IdentificationAssertion:
      title: IdentificationAssertion
      type: object
      properties:
        identificationPaths:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationPath'
    OntologyConstraints:
      title: OntologyConstraints
      type: object
      properties:
        universals:
          type: array
          items:
            $ref: '#/components/schemas/SubClassWithForAllAssertion'
        functionalities:
          type: array
          items:
            $ref: '#/components/schemas/FunctionalPropertyAssertion'
        disjointnesses:
          type: array
          items:
            $ref: '#/components/schemas/DisjointClasses'
        mandatories:
          type: array
          items:
            $ref: '#/components/schemas/MandatoryParticipationAssertion'
        keys:
          type: array
          items:
            $ref: '#/components/schemas/HasKeyAssertion'
        cardinalities:
          type: array
          items:
            $ref: '#/components/schemas/SubClassWithCardinalityAssertion'
        identifications:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationAssertion'
    DataQualityCheck:
      title: DataQualityCheck
      type: object
      properties:
        id:
          type: string
        priority:
          type: integer
          format: int32
    DataQualityCheckSet:
      title: DataQualityCheckSet
      type: object
      properties:
        ontologyConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheck'
        mappingParameters:
          type: object
          additionalProperties:
            type: string
        id:
          type: string
        user:
          type: string
    DataQualityCheckStatus:
      title: DataQualityCheckStatus
      type: object
      properties:
        resultsCount:
          type: integer
          format: int32
        id:
          type: string
        queryExecutionId:
          type: string
        status:
          type: string
    DataQualityCheckSetStatus:
      title: DataQualityCheckSetStatus
      type: object
      properties:
        ontologyConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheckStatus'
        status:
          type: string
    SPARQLResult:
      title: SPARQLResult
      type: object
      properties:
        shortIRI:
          type: string
        type:
          type: string
        lang:
          type: string
        value:
          type: string
    SPARQLResults:
      title: SPARQLResults
      type: object
      properties:
        headTerms:
          type: array
          items:
            type: string
        headTypes:
          type: object
        construct:
          type: boolean
        results:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/SPARQLResult'
    DataQualityCheckExecutionLog:
      title: DataQualityCheckExecutionLog
      type: object
      properties:
        direct:
          type: array
          items:
            type: boolean
        errorMessage:
          type: string
        objectProperties:
          type: array
          items:
            $ref: '#/components/schemas/MWSEntity'
        priority:
          type: integer
          format: int32
        type:
          type: string
        sqlQueries:
          type: array
          items:
            type: string
        cardinality:
          type: integer
          format: int32
        executionTime:
          type: integer
          format: int32
        dataProperties:
          type: array
          items:
            $ref: '#/components/schemas/MWSEntity'
        cardinalityType:
          type: integer
          format: int32
        checkSemantics:
          type: string
        resultsCount:
          type: integer
          format: int32
        property:
          $ref: '#/components/schemas/MWSEntity'
        filler:
          $ref: '#/components/schemas/MWSEntity'
        sparqlCode:
          type: string
        id:
          type: string
        results:
          $ref: '#/components/schemas/SPARQLResults'
        MWSEntity:
          $ref: '#/components/schemas/MWSEntity'
        status:
          type: string
        disjointMWSEntity:
          $ref: '#/components/schemas/MWSEntity'
    OntologyID:
      title: OntologyID
      type: object
      properties:
        ontologyVersion:
          type: string
        ontologyName:
          type: string
    MastroID:
      title: MastroID
      type: object
      properties:
        mappingID:
          type: string
        datasourceID:
          type: string
        avpID:
          type: string
        ontologyID:
          $ref: '#/components/schemas/OntologyID'
    Endpoint:
      title: Endpoint
      type: object
      properties:
        restartNeeded:
          type: boolean
        name:
          type: string
        description:
          type: string
        user:
          type: string
        mastroID:
          $ref: '#/components/schemas/MastroID'
    DataQualityCheckSetExecutionLog:
      title: DataQualityCheckSetExecutionLog
      type: object
      properties:
        ontologyConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheckExecutionLog'
        endpoint:
          type: string
        endpointInfo:
          $ref: '#/components/schemas/Endpoint'
        endTimestamp:
          type: integer
          format: int64
        user:
          type: string
        checkSetId:
          type: string
        timestamp:
          type: integer
          format: int64
    DataQualityCheckSetExecutionLogs:
      title: DataQualityCheckSetExecutionLogs
      type: object
      properties:
        executions:
          type: array
          items:
            $ref: '#/components/schemas/DataQualityCheckSetExecutionLog'
    DataQualityCheckSetDump:
      title: DataQualityCheckSetDump
      type: object
      properties:
        set:
          $ref: '#/components/schemas/DataQualityCheckSet'
        constraints:
          $ref: '#/components/schemas/OntologyConstraints'
    DataQualityCheckSetImportReport:
      title: DataQualityCheckSetImportReport
      type: object
      properties:
        actualCheckSet:
          $ref: '#/components/schemas/DataQualityCheckSet'
        importReport:
          type: object
