openapi: 3.0.0
info:
  description: This is the API for managing the Ontology Catalog
  version: 1.0.0
  title: Ontology Catalog API model
  contact:
    email: info@obdasystems.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{protocol}://{tenant}{port}/mws/rest/mwsx'
    variables:
      protocol:
        default: https
      tenant:
        default: localhost
      port:
        default: ':8989'
security:
  - apiKey: []
  - jwt: []
paths:
  /ontologyCatalog:
    post:
      tags:
        - Ontology Catalog
      summary: Perform an action for ontology to the catalog
      description: Modifies the ontology catalog byacoording to the action provided
      operationId: editCatalog
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum:
              - add
              - delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OntologyID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
    get:
      summary: GET mwsx/ontologyCatalog
      operationId: get_ontology_catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyCatalogEntries'
        '401':
          description: Unhauthorized
    delete:
      summary: DELETE mwsx/ontologyCatalog
      operationId: delete_ontology_catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unhauthorized
  /ontologyCatalog/query/start:
    post:
      tags:
        - Ontology Catalog
      summary: Starts a SPARQL query over the catalog
      operationId: startQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SPARQLQuery'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLQueryExecution'
        '401':
          description: Unhauthorized
  /ontologyCatalog/query/{queryID}/stop:
    put:
      tags:
        - Ontology Catalog
      summary: Stops a SPARQL query over the catalog
      operationId: stopQuery
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unhauthorized
  /ontologyCatalog/query/{queryID}/status:
    get:
      summary: Check the status of a SPARQL query
      description: Check the status of a SPARQL query
      operationId: check_ontology_catalog_query_status
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
      tags:
        - Ontology Catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLStatus'
        '401':
          description: Unhauthorized
  /ontologyCatalog/query/{queryID}/results:
    get:
      summary: Retrieve the results of a SPARQL query
      description: Retrieve the results of a SPARQL query
      operationId: get_ontology_catalog_query_results
      parameters:
        - name: queryID
          in: path
          required: true
          schema:
            type: string
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - Ontology Catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPARQLResults'
        '401':
          description: Unhauthorized
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-MONOLITH-SESSION-ID
      description: |
        This session ID is generated from Basic Authentication on the login route.
    jwt:
      description: |
        Generate your JWT when you log in. JWT configurations should be placed in `$MASTRO_HOME/config/mastro.jwt` file
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    OntologyID:
      title: OntologyID
      type: object
      properties:
        ontologyVersion:
          type: string
        ontologyName:
          type: string
    OntologyCatalogEntries:
      title: OntologyCatalogEntries
      type: object
      properties:
        entries:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OntologyID'
    ChartConfiguration:
      title: ChartConfiguration
      type: object
      properties:
        yVariables:
          type: array
          items:
            type: string
        series:
          type: string
        xVariable:
          type: string
        chartType:
          type: string
        cutoff:
          type: integer
          format: int32
    Tag:
      title: Tag
      type: object
      properties:
        color:
          type: string
        name:
          type: string
        description:
          type: string
    VirtualEntityQueryInfos:
      title: VirtualEntityQueryInfos
      type: object
      properties:
        virtualEntityname:
          type: string
        idSelection:
          type: string
        fieldFilters:
          type: object
          additionalProperties:
            type: string
    SPARQLQuery:
      title: SPARQLQuery
      type: object
      properties:
        selectedMappingIds:
          type: array
          items:
            type: string
        chartConfiguration:
          $ref: '#/components/schemas/ChartConfiguration'
        languages:
          type: string
        mappingParameters:
          type: object
          additionalProperties:
            type: string
        semantics:
          type: string
        constructCode:
          type: string
        queryTags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        queryDescription:
          type: string
        queryID:
          type: string
        queryCode:
          type: string
        isConstruct:
          type: boolean
        constructResultsRDFSyntax:
          type: string
        virtualEntityQueryInfos:
          $ref: '#/components/schemas/VirtualEntityQueryInfos'
    SPARQLQueryExecution:
      title: SPARQLQueryExecution
      type: object
      properties:
        queryID:
          type: string
    SPARQLStatus:
      title: SPARQLStatus
      type: object
      properties:
        executionTime:
          type: integer
          format: int32
        errorMessages:
          type: array
          items:
            type: string
        percentage:
          type: integer
          format: int32
        numLowLevelQueries:
          type: integer
          format: int32
        numResults:
          type: integer
          format: int32
        numOntologyRewritings:
          type: integer
          format: int32
        numOptimizedQueries:
          type: integer
          format: int32
        hasError:
          type: boolean
        numHighLevelQueries:
          type: integer
          format: int32
        status:
          type: string
    SPARQLResult:
      title: SPARQLResult
      type: object
      properties:
        shortIRI:
          type: string
        type:
          type: string
        lang:
          type: string
        value:
          type: string
    SPARQLResults:
      title: SPARQLResults
      type: object
      properties:
        headTerms:
          type: array
          items:
            type: string
        headTypes:
          type: object
        construct:
          type: boolean
        results:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/SPARQLResult'
